/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
/** Analizador de lenguaje Arit **/

//imports
package AnalizadorJavaCC;

import AST.AST;
import AST.NodoAST;
import Expresiones.Identificador;
import Expresiones.Expresion;
import Expresiones.Funciones.FuncionProgramada;
import Expresiones.Primitivo;
import Expresiones.Ternario;
import TablaDeSimbolos.Tipo;
import Expresiones.ExpresionLogica;
import Expresiones.ExpresionNumerica;
import Expresiones.ExpresionRelacional;
import Expresiones.IdArreglo;
import Instrucciones.Asignacion;
import java_cup.runtime.*;
import java.util.*;
import GUI.Ventana;
import Instrucciones.If;
import Expresiones.Llamada;
import Instrucciones.Break;
import Instrucciones.Caso;
import Instrucciones.Comprobar;
import Instrucciones.Continue;
import Instrucciones.HacerMientras;
import Instrucciones.Mientras;
import Instrucciones.Para;
import Instrucciones.Retorno;
import TablaDeSimbolos.NodoError;
import Expresiones.Dimension;
import Expresiones.LlamadaArreglo;
public class Gramatica implements GramaticaConstants {

/** Fin Lexico */


/**
 * Producci贸n inicial
 * Analizar -> (Instruccion)+ EOF
 */
  final public AST Analizar() throws ParseException {
 LinkedList ins = new LinkedList<NodoAST>(); NodoAST nodo;
    label_1:
    while (true) {
      nodo = Instruccion();
                         ins.add(nodo);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIF:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
                                                  {if (true) return new AST(ins);}
    throw new Error("Missing return statement in function");
  }

/**
 * Instrucci贸n -> print
 *              | declaracion
 *              | asignaci贸n
 *              | if 
 *              | while
 *              | switch
 *              | do while
 *              | for
 *              | llamada
 *              | length 
 *              
 */
  final public NodoAST Instruccion() throws ParseException {
 NodoAST nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      nodo = Asignacion();
                       {if (true) return nodo;}
      break;
    case RIF:
      nodo = If();
               {if (true) return nodo;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Asignaci贸n-> IDENTIFICADOR = expresion;
 *            | IDENTIFICADOR Dimension = expresion;
 */
  final public NodoAST Asignacion() throws ParseException {
 Expresion e;Token id;
    id = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IGUAL);
    e = Expresion();
    jj_consume_token(PTCOMA);
                                                      {if (true) return new Asignacion(id.image,e,token.beginLine,token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/**
 * If -> if(condicion) { Bloque } (else if {Bloque})* (else {bloque})?
 */
  final public NodoAST If() throws ParseException {
 Expresion nodo, si; LinkedList<NodoAST> insIf, insElse = new LinkedList<NodoAST>();
    jj_consume_token(RIF);
    jj_consume_token(PARIZQ);
    nodo = Expresion();
    jj_consume_token(PARDER);
    insIf = Bloque();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELSE:
      if (jj_2_1(2)) {
        jj_consume_token(RELSE);
        si = If();
                                    insElse.add(si);
      } else if (jj_2_2(2)) {
        jj_consume_token(RELSE);
        insElse = Bloque();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
   {if (true) return new If(nodo, insIf,insElse,token.beginLine,token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

/**
 * Bloque -> {instrucciones+}
 */
  final public LinkedList<NodoAST> Bloque() throws ParseException {
 LinkedList insBloque = new LinkedList<NodoAST>(); NodoAST nodo;
    jj_consume_token(LLAVEIZQ);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIF:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      nodo = InstruccionLocal();
                                       insBloque.add(nodo);
    }
    jj_consume_token(LLAVEDER);
                                                                          {if (true) return insBloque;}
    throw new Error("Missing return statement in function");
  }

  final public NodoAST InstruccionLocal() throws ParseException {
 NodoAST nodo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      nodo = Asignacion();
                       {if (true) return nodo;}
      break;
    case RIF:
      nodo = If();
               {if (true) return nodo;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Expresion
 */
  final public Expresion Expresion() throws ParseException {
 Expresion e,e1;
    e = CondicionAnd();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      e1 = CondicionAnd();
                              e = new ExpresionLogico(e,e1,Tipo.Tipos.OR,token.beginLine,token.beginColumn);
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ExpresionLogica CondicionAnd() throws ParseException {
 Expresion e,e1;
    e = ExpresionIgualdad();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      e1 = ExpresionIgualdad();
                                    e= new ExpresionLogica(e,e1,Tipo.Tipos.AND,token.beginLine,token.beginColumn);
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionIgualdad -> ExpresionRelacional ('==' ExpresionRelacional)*
                     |  ExpresionRelacional ('!=' ExpresionRelacional)*
*/
  final public ExpresionRelacional ExpresionIgualdad() throws ParseException {
 Expresion e, e1;
    e = ExpresionRelacional();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALACION:
      case DIFERENCIACION:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALACION:
        jj_consume_token(IGUALACION);
        e1 = ExpresionRelacional();
                                               e = new ExpresionRelacional(e, e1, OperadorRelacional.IGUALACION, token.beginLine, token.beginColumn);
        break;
      case DIFERENCIACION:
        jj_consume_token(DIFERENCIACION);
        e1 = ExpresionRelacional();
                                                   e = new ExpresionRelacional(e, e1, OperadorRelacional.DIFERENCIACION, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionRelacional -> ExpresionAditiva ('>' ExpresionAditiva)*
                     |  ExpresionAditiva ('<' ExpresionAditiva)*
                     |  ExpresionAditiva ('>=' ExpresionAditiva)*
                     |  ExpresionAditiva ('<=' ExpresionAditiva)*
*/
  final public ExpresionRelacional ExpresionRelacional() throws ParseException {
 Expresion e, e1;
    e = ExpresionAditiva();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENQUE:
      case MAYQUE:
      case MENIGUAL:
      case MAYIGUAL:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYQUE:
        jj_consume_token(MAYQUE);
        e1 = ExpresionAditiva();
                                        e = new ExpresionRelacional(e, e1, Tipo.Tipos.MAYQUE, token.beginLine, token.beginColumn);
        break;
      case MENQUE:
        jj_consume_token(MENQUE);
        e1 = ExpresionAditiva();
                                        e = new ExpresionRelacional(e, e1, Tipo.Tipos.MENQUE, token.beginLine, token.beginColumn);
        break;
      case MAYIGUAL:
        jj_consume_token(MAYIGUAL);
        e1 = ExpresionAditiva();
                                          e = new ExpresionRelacional(e, e1, Tipo.Tipos.MAYIGUAL, token.beginLine, token.beginColumn);
        break;
      case MENIGUAL:
        jj_consume_token(MENIGUAL);
        e1 = ExpresionAditiva();
                                          e = new ExpresionRelacional(e, e1, Tipo.Tipos.MENIGUAL, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionAditiva -> ExpresionMultiplicativa ('+' ExpresionMultiplicativa)*
                     |  ExpresionMultiplicativa ('-' ExpresionMultiplicativa)*
*/
  final public ExpresionAritmetica ExpresionAditiva() throws ParseException {
 Expresion e, e1;
    e = ExpresionMultiplicativa();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        e1 = ExpresionMultiplicativa();
                                            e = new ExpresionAritmetica(e, e1, Tipo.Operador.MAS, token.beginLine, token.beginColumn);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        e1 = ExpresionMultiplicativa();
                                              e = new ExpresionAritmetica(e, e1, Tipo.Operador.MENOS, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionMultiplicativa -> ExpresionUnaria ('*' ExpresionUnaria)*
                            |  ExpresionUnaria ('/' ExpresionUnaria)*
                            |  ExpresionUnaria ('%' Expresionunaria)*
*/
  final public AST ExpresionMultiplicativa() throws ParseException {
 AST e, e1;
    e = ExpresionUnaria();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        e1 = ExpresionUnaria();
                                    e = new ExpresionAritmetica(e, e1, Tipo.Operador.POR, token.beginLine, token.beginColumn);
        break;
      case DIV:
        jj_consume_token(DIV);
        e1 = ExpresionUnaria();
                                    e = new ExpresionAritmetica(e, e1, Tipo.Operador.DIV, token.beginLine, token.beginColumn);
        break;
      case MOD:
        jj_consume_token(MOD);
        e1 = ExpresionUnaria();
                                    e =new ExpresionAritmetica(e, e1, Tipo.Operador.DIV, token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionUnaria -> '-' ExpresionUnaria
                    |  Primitivo
 */
  final public Expresion ExpresionUnaria() throws ParseException {
 Expresion e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOS:
      jj_consume_token(MENOS);
      e = ExpresionUnaria();
                                 {if (true) return new Aritmetica(e, OperadorAritmetico.MENOSUNARIO, token.beginLine, token.beginColumn);}
      break;
    case NOT:
      jj_consume_token(NOT);
      e = ExpresionUnaria();
                               {if (true) return new Logica(e, OperadorLogico.NOT, token.beginLine, token.beginColumn);}
      break;
    case NUMERO:
    case DECIMAL:
    case PARIZQ:
    case IDENTIFICADOR:
    case STRING:
      e = Primitivo();
                   {if (true) return e;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Primitivo -> Numero
              |  Decimal
              |  '(' Expresion ')' 
*/
  final public Expresion Primitivo() throws ParseException {
 Expresion e; Token t; String cad;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
              {if (true) return new Primitivo(new Tipo(Tipos.NUMERO), Double.parseDouble(token.image), token.beginLine, token.beginColumn);}
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
               {if (true) return new Primitivo(new Tipo(Tipos.NUMERO), Double.parseDouble(token.image), token.beginLine, token.beginColumn);}
      break;
    case STRING:
      t = jj_consume_token(STRING);
                    cad = t.image.substring(1,t.image.length()-1);
                    cad = cad.replace("\\","\\");
                    cad = cad.replace("\\n","\n");
                    cad = cad.replace("\\t","\t");
                    {if (true) return new Primitivo(new Tipo(Tipos.CADENA), cad, token.beginLine, token.beginColumn);}
      break;
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_3(2)) {
        t = jj_consume_token(IDENTIFICADOR);
                                   {if (true) return new Identificador(t.image, token.beginLine, token.beginColumn);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARIZQ:
          jj_consume_token(PARIZQ);
          e = Expresion();
          jj_consume_token(PARDER);
                                     {if (true) return e;}
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(RELSE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(LLAVEIZQ)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(RELSE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(RIF)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x400,0x800,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x2000180,0x180,0x2000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20000,0x20000,0x0,0x20000,0x20000,0x4000,0x2000,0x1800,0x1800,0x780,0x780,0x1,0x1,0x16,0x16,0x128001,0x100000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
