/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
/** Analizador de lenguaje Arit **/

//imports
package AnalizadorJavaCC;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NUMERO = 7;
  /** RegularExpression Id. */
  int DECIMAL = 8;
  /** RegularExpression Id. */
  int RNULL = 9;
  /** RegularExpression Id. */
  int RIF = 10;
  /** RegularExpression Id. */
  int RELSE = 11;
  /** RegularExpression Id. */
  int RSWITCH = 12;
  /** RegularExpression Id. */
  int RCASE = 13;
  /** RegularExpression Id. */
  int RWHILE = 14;
  /** RegularExpression Id. */
  int RDO = 15;
  /** RegularExpression Id. */
  int RFOR = 16;
  /** RegularExpression Id. */
  int RIN = 17;
  /** RegularExpression Id. */
  int RBREAK = 18;
  /** RegularExpression Id. */
  int RCONTINUE = 19;
  /** RegularExpression Id. */
  int RRETURN = 20;
  /** RegularExpression Id. */
  int RFUNC = 21;
  /** RegularExpression Id. */
  int PTCOMA = 22;
  /** RegularExpression Id. */
  int COMA = 23;
  /** RegularExpression Id. */
  int DOSPT = 24;
  /** RegularExpression Id. */
  int PARIZQ = 25;
  /** RegularExpression Id. */
  int PARDER = 26;
  /** RegularExpression Id. */
  int CORIZQ = 27;
  /** RegularExpression Id. */
  int CORDER = 28;
  /** RegularExpression Id. */
  int LLAVEIZQ = 29;
  /** RegularExpression Id. */
  int LLAVEDER = 30;
  /** RegularExpression Id. */
  int MAS = 31;
  /** RegularExpression Id. */
  int MENOS = 32;
  /** RegularExpression Id. */
  int POR = 33;
  /** RegularExpression Id. */
  int DIV = 34;
  /** RegularExpression Id. */
  int POT = 35;
  /** RegularExpression Id. */
  int MOD = 36;
  /** RegularExpression Id. */
  int TERNARIO = 37;
  /** RegularExpression Id. */
  int IGUAL = 38;
  /** RegularExpression Id. */
  int MENQUE = 39;
  /** RegularExpression Id. */
  int MAYQUE = 40;
  /** RegularExpression Id. */
  int MENIGUAL = 41;
  /** RegularExpression Id. */
  int MAYIGUAL = 42;
  /** RegularExpression Id. */
  int IGUALACION = 43;
  /** RegularExpression Id. */
  int DIFERENCIACION = 44;
  /** RegularExpression Id. */
  int AND = 45;
  /** RegularExpression Id. */
  int OR = 46;
  /** RegularExpression Id. */
  int NOT = 47;
  /** RegularExpression Id. */
  int IGUALFUNC = 48;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 49;
  /** RegularExpression Id. */
  int STRING = 52;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<NUMERO>",
    "<DECIMAL>",
    "\"null\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"case\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"in\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"function\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"%%\"",
    "\"?\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"=>\"",
    "<IDENTIFICADOR>",
    "\"\\\"\"",
    "<token of kind 51>",
    "\"\\\"\"",
  };

}
