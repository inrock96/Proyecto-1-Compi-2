
//Imports

package AnalizadorFlexCup;
import java_cup.runtime.*;
import java.util.*;

parser code{:
    /**
     *variable en la que se almacena el árbol
     *genera luego del análisis sintáctico
     */
    public LinkedList<Instruccion> AST;
    /**
     *Método que se llama automáticamente
     *al tener un error sintáctico
     */
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //CHECK ingresar a una lista de errores
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        //CHECK ingresar a una lista de errores
    } 
     /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public LinkedList<Instruccion> getAST() {
        return AST;
    }
:}

terminal String PTCOMA,PARIZQ,PARDER,LLAVIZQ,LLAVDER;
terminal String MAS,MENOS,POR,DIV,POT,MOD;
terminal String MENQUE,MAYQUE,MENIGUAL,MAYIGUAL;
terminal String OR, AND, NOT;
terminal String NUMERO;
terminal String DECIMAL;
terminal String CADENA;
terminal String UMENOS;
terminal String RIMPRIMIR, RWHILE,RIF,RELSE;
terminal String IGUAL;
terminal String IGUALACION,DIFERIENCIACION;
terminal String IDENTIFICADOR;

non terminal ini;
non terminal LinkedList<Instruccion> instrucciones;
non terminal LinkedList<Instruccion> bloque; 
non terminal Instruccion llamada, primitivo;
non terminal Instruccion instruccion;
non terminal Instruccion expresion_numerica;
non terminal Instruccion expresion,expresion_relacional;
non terminal Instruccion expresion_logica;
precedence left CONCAT;
precedence left MAS,MENOS;
precedence left POR,DIVIDIDO;
precedence right UMENOS; 

start with ini;

ini::= instrucciones:a{:
    parser.AST =a;
:}
;

instrucciones ::= instrucciones:a instruccion:b{:RESULT = a; RESULT.add(b);:}
                | instruccion:a{:RESULT = new LinkedList<>();RESULT.add(a):}
                
;

instruccion ::=
        RIMPRIMIR PARIZQ expresion:a PARDER PTCOMA              {:RESULT = new Print();:}
        | IDENTIFICADOR IGUAL expresion PTCOMA                  {:RESULT = new Asignacion();:}
        | RIF PARIZQ expresion_logica:a PARDER bloque:b             {:RESULT = new If();:}

expresion ::= 
    expresion_numerica
    | expresion_logica
    | expresion_numerica
    | PARIZQ expresion PARDER
    | llamada
    | primitivo
    ;

expresion_numerica::=
    expresion:a MAS expresion:b                     {:return new ExpresionNumerica(OperadorAritmetico.MAS,a,b);:}
    |expresion:a MENOS expresion:b                  {:return new ExpresionNumerica(OperadorAritmetico.MENOS,a,b);:}
    |expresion:a POR expresion:b                    {:return new ExpresionNumerica(OperadorAritmetico.POR,a,b);:}
    |expresion:a DIV expresion:b                    {:return new ExpresionNumerica(OperadorAritmetico.DIV,a,b);:}
    |expresion:a POT expresion:b                    {:return new ExpresionNumerica(OperadorAritmetico.POT,a,b);:}                                                    {:return a;:}
    |MENOS expresion:a                              {:return new ExpresionNumerica(OperadorAritmetico.MENOS,a);:}%prec UMENOS
    ;
expresion_relacional::=
    expresion:a MAYQUE expresion:b                  {:return new ExpresionRelacional(OperadorRelacional.MAYQUE,a,b);:}
    |expresion:a MAYIGUAL expresion:b               {:return new ExpresionRelacional(OperadorRelacional.MAYIGUAL,a,b);:}
    |expresion:a MENQUE expresion:b                 {:return new ExpresionRelacional(OperadorRelacional.MENQUE,a,b);:}
    |expresion:a MENIGUAL expresion:b               {:return new ExpresionRelacional(OperadorRelacional.MENIGUAL,a,b);:}
    |expresion:a IGUALACION expresion:b             {:return new ExpresionRelacional(OperadorRelacional.IGUALACION,a,b);:}
    |expresion:a DIFERIENCIACION expresion:b        {:return new ExpresionRelacional(OperadorRelacional.DIFERIENCIACION,a,b);:}
    ;
expresion_logica::=
    expresion:a OR expresion                        {:return new ExpresionLogica(OperadorRelacional.OR,a,b);:}
    |expresion:a AND expresion                      {:return new ExpresionLogica(OperadorRelacional.AND,a,b);:}
    |NOT expresion:a                                {:return new ExpresionLogica(OperadorRelacional.NOT,a);:}
    ;
primitivo::=
    NUMERO:a                                        {:return new Primitivo();:}
    |DECIMAL:a                                      {:return new Primitivo();:}
    |CADENA:a                                       {:return new Primitivo();:}
    |IDENTIFICADOR:a                                {:return new Primitivo();:}
    ;