
//Imports

package AnalizadorFlexCup;

import AST.NodoAST;

import Expresiones.Identificador;
import Expresiones.Expresion;
import Expresiones.Primitivo;
import Expresiones.Ternario;
import TablaDeSimbolos.Tipo;
import Expresiones.ExpresionLogica;
import Expresiones.ExpresionNumerica;
import Expresiones.ExpresionRelacional;
import Instrucciones.Asignacion;
import java_cup.runtime.*;
import java.util.*;
import GUI.Ventana;
import Instrucciones.If;
import Expresiones.Funciones.Print;
import TablaDeSimbolos.NodoError;
import java_cup.runtime.XMLElement;


parser code{:
    /**
     *variable en la que se almacena el árbol
     *genera luego del análisis sintáctico
     */
    public LinkedList<NodoAST> AST;
    /**
     *Método que se llama automáticamente
     *al tener un error sintáctico
     */
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error, no se esperaba el caracter: "+s.value));
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error irrecuperable, no se esperaba el caracter: "+s.value));
    } 
     /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public LinkedList<NodoAST> getAST() {
        return AST;
    }
:}

terminal String PTCOMA,PARIZQ,PARDER,LLAVIZQ,LLAVDER, CORIZQ,CORDER, DOSPT, COMA;
terminal String MAS,MENOS,POR,DIV,POT,MOD;
terminal String MENQUE,MAYQUE,MENIGUAL,MAYIGUAL;
terminal String OR, AND, NOT;
terminal String NUMERO;
terminal String DECIMAL;
terminal String CADENA;
terminal String UMENOS;
terminal String /* RIMPRIMIR 
                ,*/RWHILE
                ,RIF
                ,RELSE/* 
                ,RC */
                ,RIN
                , RDO
                , IGUALFUNC
                ,DIFERENCIACION
                ,RFOR
                /* ,RPIE */
                ,RNULL
                /* ,RNROW
                ,RNCOL
                ,RLIST
                ,RPLOT */
                ,RCASE
                /* ,RHIST
                ,RMEAN
                ,RMODE
                ,RPRINT
                ,RROUND
                ,RTRUNK
                ,RARRAY */
                ,RBREAK
                /*,RLENGTH*/
                ,RSWITCH
                ,RRETURN
                /* ,RREMOVE
                ,RTYPEOF
                ,RMEDIAN
                ,RMATRIX
                ,RBARPLOT */
                ,RFUNC
                ,RCONTINUE
                /* ,RTOLOWER
                ,RTOUPPER
                ,RSTRLENGTH */
                ,RDEFAULT
                ,RTRUE
                ,RFALSE
                ;
terminal String IGUAL, TERNARIO;
terminal String IGUALACION;
terminal String IDENTIFICADOR;

non terminal ini;
non terminal LinkedList<NodoAST> instrucciones;
non terminal LinkedList<NodoAST> listaexpresiones, instruccioneslocales, elseifs, parametros;
non terminal LinkedList<NodoAST> bloque, casos,listaparam, dimensiones; 
non terminal NodoAST llamada, instruccionlocal, elseif;
non terminal NodoAST instruccion;
non terminal NodoAST ntif, idarreglo,dimension;
non terminal NodoAST caso, defecto,param,asignacion;
non terminal Expresion expresion_numerica,primitivo;
non terminal Expresion expresion,expresion_relacional;
non terminal Expresion expresion_logica;

precedence left OR;
precedence left AND;

precedence left IGUALACION,
                DIFERENCIACION ,
                MENQUE          ,
                MAYQUE          ,
                MENIGUAL        ,
                MAYIGUAL        ;

precedence left MAS,MENOS;
precedence left POR,DIV,MOD;
precedence right POT;
precedence right TERNARIO;
precedence right UMENOS; 
precedence right NOT;
precedence right IGUAL;
start with ini;

ini::= instrucciones:a{:
    parser.AST =a;
:}
;

instrucciones ::= instrucciones:a instruccion:b{:RESULT = a; RESULT.add(b);:}
                | instruccion:a{:RESULT = new LinkedList<>();RESULT.add(a);:}
                
                
;

instruccion ::=
         ntif
        | RWHILE PARIZQ expresion:a PARDER bloque:b
        | RSWITCH PARIZQ expresion PARDER LLAVIZQ casos defecto LLAVDER
        | RFOR PARIZQ IDENTIFICADOR:a RIN expresion PARDER bloque
        | IDENTIFICADOR IGUAL RFUNC PARIZQ listaparam PARDER bloque     //metodo
        | IDENTIFICADOR IGUAL RFUNC PARIZQ  PARDER bloque     //metodo
        | parametros PARDER IGUALFUNC bloque
        | IDENTIFICADOR IGUAL IDENTIFICADOR PARIZQ PARDER IGUALFUNC bloque
        | IDENTIFICADOR IGUAL PARIZQ PARDER IGUALFUNC bloque
        | RDO bloque:a RWHILE PARIZQ expresion:b PARDER PTCOMA  
        | asignacion PTCOMA
        | llamada PTCOMA
        | llamada
        | RDO bloque:a RWHILE PARIZQ expresion:b PARDER   
        | asignacion 
        | error PTCOMA
        | error LLAVDER
    ;
llamada::= IDENTIFICADOR PARIZQ listaexpresiones PARDER      //llamada
            |IDENTIFICADOR PARIZQ  PARDER
            ;
parametros::=IDENTIFICADOR IGUAL PARIZQ IDENTIFICADOR COMA listaparam
            | IDENTIFICADOR IGUAL PARIZQ IDENTIFICADOR IGUAL expresion COMA listaparam
            |IDENTIFICADOR IGUAL PARIZQ IDENTIFICADOR IGUAL expresion
            ;
instruccioneslocales::= instruccioneslocales instruccionlocal
                        |instruccionlocal
                        ;

instruccionlocal::=  RBREAK PTCOMA
                    | RRETURN PARIZQ expresion PARDER PTCOMA
                    | RRETURN PTCOMA
                    | RCONTINUE PTCOMA
                    | ntif
                    | RWHILE PARIZQ expresion:a PARDER bloque:b
                    | RSWITCH PARIZQ expresion PARDER LLAVIZQ casos defecto LLAVDER
                    | RFOR PARIZQ IDENTIFICADOR:a RIN expresion PARDER bloque
                    | IDENTIFICADOR IGUAL RFUNC PARIZQ listaparam PARDER bloque     //metodo
                    | IDENTIFICADOR IGUAL RFUNC PARIZQ  PARDER bloque     //metodo
                    | parametros PARDER IGUALFUNC bloque
                    | IDENTIFICADOR IGUAL IDENTIFICADOR PARIZQ PARDER IGUALFUNC bloque
                    | IDENTIFICADOR IGUAL PARIZQ PARDER IGUALFUNC bloque
                    | RDO bloque:a RWHILE PARIZQ expresion:b PARDER PTCOMA  
                    | asignacion PTCOMA
                    | IDENTIFICADOR PARIZQ listaexpresiones PARDER PTCOMA     //llamada
                    | IDENTIFICADOR PARIZQ  PARDER PTCOMA     //llamada
                    | RDO bloque:a RWHILE PARIZQ expresion:b PARDER   
                    | asignacion 
                    | IDENTIFICADOR PARIZQ listaexpresiones PARDER      //llamada
                    | IDENTIFICADOR PARIZQ  PARDER      //llamada
                    | RBREAK 
                    | RRETURN PARIZQ expresion PARDER
                    | RRETURN 
                    | RCONTINUE 
                    ;

ntif::= RIF PARIZQ expresion:a PARDER bloque:b             {:RESULT = new If();:}
        | RIF PARIZQ expresion:a PARDER bloque:b elseifs
        | RIF PARIZQ expresion:a PARDER bloque:b elseifs RELSE bloque:d
        | RIF PARIZQ expresion:a PARDER bloque:b RELSE bloque:c
        ;
listaexpresiones::= listaexpresiones COMA expresion
                    | expresion
                    ;
listaparam::=   listaparam COMA param
                | param
                ;
param::=IDENTIFICADOR IGUAL expresion 
        |IDENTIFICADOR 
        ;
asignacion::= IDENTIFICADOR:a IGUAL expresion:b         {:RESULT = new Asignacion(a,b,aleft,aright);:}
            |idarreglo:a IGUAL expresion:b          {:RESULT = new Asignacion(a,b,aleft,aright);:}
            ;
casos   ::= casos caso
            caso
            ;
caso    ::= RCASE expresion DOSPT instruccioneslocales
            
            ;
defecto ::= RDEFAULT DOSPT instrucciones
            ;
elseifs ::=  elseifs elseif
            |elseif 
            ;
elseif ::= RELSE RIF PARIZQ expresion PARDER bloque;
bloque ::= LLAVIZQ instruccioneslocales:a LLAVDER {:RESULT = a;:}
            |error
            ;
expresion ::= 
      expresion_numerica:a                          {:RESULT = a;:}
    | expresion_logica:a                            {:RESULT = a;:}
    | expresion_relacional:a                        {:RESULT = a;:}
    | PARIZQ expresion:a PARDER                     {:RESULT = a;:}
    | primitivo:a                                   {:RESULT = a;:}
    ;

expresion_numerica::=
    expresion:a MAS expresion:b                     {:RESULT= new ExpresionNumerica(a,b,Tipo.Operador.MAS,aleft,aright);:}
    |expresion:a MENOS expresion:b                  {:RESULT=new ExpresionNumerica(a,b,Tipo.Operador.MENOS,aleft,aright);:}
    |expresion:a POR expresion:b                    {:RESULT=new ExpresionNumerica(a,b,Tipo.Operador.POR,aleft,aright);:}
    |expresion:a MOD expresion:b                    {:RESULT=new ExpresionNumerica(a,b,Tipo.Operador.MOD,aleft,aright);:}
    |expresion:a DIV expresion:b                    {:RESULT=new ExpresionNumerica(a,b,Tipo.Operador.DIV,aleft,aright);:}
    |expresion:a POT expresion:b                    {:RESULT=new ExpresionNumerica(a,b,Tipo.Operador.POT,aleft,aright);:}
    |MENOS expresion:a                              {:RESULT=new ExpresionNumerica(a,Tipo.Operador.MENOSUNARIO,aleft,aright);:}%prec UMENOS
    ;

expresion_relacional::=
    expresion:a MAYQUE expresion:b                  {:RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MAYOR,aleft,aright);:}
    |expresion:a MAYIGUAL expresion:b               {:RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MAYIGUAL,aleft,aright);:}
    |expresion:a MENQUE expresion:b                 {:RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MENOR,aleft,aright);:}
    |expresion:a MENIGUAL expresion:b               {:RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MENIGUAL,aleft,aright);:}
    |expresion:a IGUALACION expresion:b             {:RESULT= new ExpresionRelacional(a,b,Tipo.Operador.IGUALACION,aleft,aright);:}
    |expresion:a DIFERENCIACION expresion:b        {:RESULT= new ExpresionRelacional(a,b,Tipo.Operador.DIFERENCIACION,aleft,aright);:}
    ;
expresion_logica::=
    expresion:a OR expresion:b                        {:RESULT = new ExpresionLogica(a,b,Tipo.Operador.OR,aleft,aright);:}
    |expresion:a AND expresion:b                      {:RESULT = new ExpresionLogica(a,b,Tipo.Operador.AND,aleft,aright);:}
    |NOT expresion:a                                {:RESULT = new ExpresionLogica(a,Tipo.Operador.NOT,aleft,aright);:}
    |expresion:a TERNARIO expresion:b DOSPT expresion:c   {:RESULT = new Ternario(a,b,c,aleft,aright);:}
    ;
idarreglo::= IDENTIFICADOR dimensiones              
            ;
dimensiones::= dimensiones dimension
            | dimension;
dimension::= CORIZQ expresion CORDER
            |CORIZQ CORIZQ expresion CORDER CORDER  
            ;
primitivo::=
    NUMERO:a                                        {:RESULT = new Primitivo(Integer.parseInt(a),Tipo.Tipos.INTEGER,aleft,aright);:}
    |DECIMAL:a                                      {:RESULT = new Primitivo(Double.parseDouble(a),Tipo.Tipos.NUMERIC,aleft,aright);:}
    |CADENA:a                                       {:RESULT = new Primitivo(a,Tipo.Tipos.STRING,aleft,aright);:}
    |IDENTIFICADOR:a                                {:RESULT= new Identificador(a,aleft,aright);:}
    |RTRUE:a                                          {:RESULT = new Primitivo(true,Tipo.Tipos.BOOLEANO,aleft,aright);:}
    |RFALSE:a                                         {:RESULT = new Primitivo(false,Tipo.Tipos.BOOLEANO,aleft,aright);:}
    |RNULL                                          {:RESULT = null;:}
    |idarreglo                                      
    |llamada                                        
    |RDEFAULT:a                                     {:RESULT = new Primitivo(a,Tipo.Tipos.DEFECTO,aleft,aright);:}                                      
    ;