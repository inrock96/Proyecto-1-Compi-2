
//Imports

package AnalizadorFlexCup;
import java_cup.runtime.*;
import java.util.*;

parser code{:
    /**
     *variable en la que se almacena el árbol
     *genera luego del análisis sintáctico
     */
    public LinkedList<Instruccion> AST;
    /**
     *Método que se llama automáticamente
     *al tener un error sintáctico
     */
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //CHECK ingresar a una lista de errores
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        //CHECK ingresar a una lista de errores
    } 
     /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public LinkedList<Instruccion> getAST() {
        return AST;
    }
:}

terminal String PTCOMA,PARIZQ,PARDER,LLAVIZQ,LLAVDER;
terminal String MAS,MENOS,POR,DIV,POT;
terminal String MENQUE,MAYQUE,MENIGUAL,MAYIGUAL;
terminal String NUMERO;
terminal String DECIMAL;
terminal String CADENA;
terminal String UMENOS;
terminal String RIMPRIMIR, RWHILE,RIF,RELSE;
terminal String IGUAL;
terminal String IGUALACION,DIFERIENCIACION;
terminal String IDENTIFICADOR;

non terminal ini;
non terminal LinkedList<Instruccion> instrucciones;
non terminal Instruccion instruccion;
non terminal Operacion expresion_numerica;
non terminal Operacion expresion_cadena;
non terminal Operacion expresion_logica;
precedence left CONCAT;
precedence left MAS,MENOS;
precedence left POR,DIVIDIDO;
precedence right UMENOS; 

start with ini;

ini::= instrucciones:a{:
    parser.AST =a;
:}
;

instrucciones ::= instrucciones:a instruccion:b{:RESULT = a; RESULT.add(b);:}
                | instruccion:a{:RESULT = new LinkedList<>();RESULT.add(a):}