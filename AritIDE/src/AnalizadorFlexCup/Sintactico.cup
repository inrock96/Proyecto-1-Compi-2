
//Imports

package AnalizadorFlexCup;

import AST.NodoAST;
import Estructuras.Primitivo;
import Expresiones.ExpresionLogica;
import Expresiones.ExpresionNumerica;
import Expresiones.ExpresionRelacional;
import java_cup.runtime.*;
import java.util.*;
import GUI.Ventana;
import Instrucciones.If;
import Expresiones.Funciones.Print;
import TablaDeSimbolos.Asignacion;
import TablaDeSimbolos.NodoError;
import java_cup.runtime.XMLElement;


parser code{:
    /**
     *variable en la que se almacena el árbol
     *genera luego del análisis sintáctico
     */
    public LinkedList<NodoAST> AST;
    /**
     *Método que se llama automáticamente
     *al tener un error sintáctico
     */
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error, no se esperaba el caracter: "+s.value));
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error irrecuperable, no se esperaba el caracter: "+s.value));
    } 
     /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public LinkedList<NodoAST> getAST() {
        return AST;
    }
:}

terminal String PTCOMA,PARIZQ,PARDER,LLAVIZQ,LLAVDER, CORIZQ,CORDER, DOSPT, COMA;
terminal String MAS,MENOS,POR,DIV,POT,MOD;
terminal String MENQUE,MAYQUE,MENIGUAL,MAYIGUAL;
terminal String OR, AND, NOT;
terminal String NUMERO;
terminal String DECIMAL;
terminal String CADENA;
terminal String UMENOS;
terminal String RIMPRIMIR
                ,RWHILE
                ,RIF
                ,RELSE
                ,RC
                ,RIN
                , RDO
                , IGUALFUNC
                ,DIFERENCIACION
                ,RFOR
                /* ,RPIE */
                ,RNULL
                /* ,RNROW
                ,RNCOL
                ,RLIST
                ,RPLOT */
                ,RCASE
                /* ,RHIST
                ,RMEAN
                ,RMODE
                ,RPRINT
                ,RROUND
                ,RTRUNK
                ,RARRAY */
                ,RBREAK
                /*,RLENGTH*/
                ,RSWITCH
                ,RRETURN
                /* ,RREMOVE
                ,RTYPEOF
                ,RMEDIAN
                ,RMATRIX
                ,RBARPLOT */
                ,RFUNC
                ,RCONTINUE
                /* ,RTOLOWER
                ,RTOUPPER
                ,RSTRLENGTH */
                ,RDEFAULT
                ,RTRUE
                ,RFALSE
                ;
terminal String IGUAL, TERNARIO;
terminal String IGUALACION;
terminal String IDENTIFICADOR;

non terminal ini;
non terminal LinkedList<NodoAST> instrucciones;
non terminal LinkedList<NodoAST> listaexpresiones;
non terminal LinkedList<NodoAST> bloque, casos; 
non terminal NodoAST llamada, primitivo;
non terminal NodoAST instruccion;
non terminal NodoAST caso;
non terminal NodoAST expresion_numerica;
non terminal NodoAST expresion,expresion_relacional;
non terminal NodoAST expresion_logica;

precedence left OR;
precedence left AND;

precedence left IGUALACION,
                DIFERENCIACION ,
                MENQUE          ,
                MAYQUE          ,
                MENIGUAL        ,
                MAYIGUAL        ;

precedence left MAS,MENOS;
precedence left POR,DIV,MOD;
precedence right POT;

precedence right UMENOS; 
precedence right NOT;
start with ini;

ini::= instrucciones:a{:
    parser.AST =a;
:}
;

instrucciones ::= instrucciones:a instruccion:b{:RESULT = a; RESULT.add(b);:}
                | instruccion:a{:RESULT = new LinkedList<>();RESULT.add(a);:}
                | error
                
;

instruccion ::=
         ntif
        | RWHILE PARIZQ expresion:a PARDER bloque:b
        | RSWITCH PARIZQ expresion PARDER LLAVIZQ casos defecto LLAVDER
        | RFOR PARIZQ IDENTIFICADOR:a RIN expresion PARDER bloque
        | IDENTIFICADOR IGUAL RFUNC PARIZQ parametros PARDER bloque
        | IDENTIFICADOR IGUAL PARIZQ parametros PARDER IGUALFUNC bloque
        | RDO bloque:a RWHILE PARIZQ expresion:b PARDER PTCOMA
        | IDENTIFICADOR IGUAL expresion PTCOMA
        | IDENTIFICADOR PARIZQ parametros PARDER PTCOMA       
        | IDENTIFICADOR IGUAL expresion '\n';
    ;
instruccioneslocales::= instruccioneslocales instruccionlocal
                        |instruccionlocal
                        ;
instruccionlocal::=  RBREAK PTCOMA
                    | RRETURN expresion PTCOMA
                    | RCONTINUE PTCOMA
                    ;

ntif::= RIF PARIZQ expresion:a PARDER bloque:b             {:RESULT = new If();:}
        | RIF PARIZQ expresion:a PARDER bloque:b elseifs
        | RIF PARIZQ expresion:a PARDER bloque:b elseifs RELSE bloque:d
        | RIF PARIZQ expresion:a PARDER bloque:b RELSE bloque:c

listaexpresiones::= listaexpresiones COMA expresion
                    | expresion
                    ;
listaparam::=   listaparam COMA param
                | param
                ;
param::=IDENTIFICADOR IGUAL expresion
        | expresion
        ;
casos   ::= casos caso
            caso
            ;
caso    ::= RCASE expresion DOSPT instruccioneslocales
            
            ;
defecto ::= RDEFAULT DOSPT instrucciones
            ;
elseifs ::=  elseifs elseif
            |elseif 
            ;
elseif ::= RELSE RIF PARIZQ expresion PARDER bloque;
bloque ::= LLAVIZQ instruccioneslocales:a LLAVDER {:RESULT = a;:}
            |error
            ;
expresion ::= 
      expresion_numerica
    | expresion_logica
    | expresion_relacional
    | PARIZQ expresion PARDER
    | primitivo
    ;

expresion_numerica::=
    expresion:a MAS expresion:b                     {:return new ExpresionNumerica(OperadorAritmetico.MAS,a,b);:}
    |expresion:a MENOS expresion:b                  {:return new ExpresionNumerica(OperadorAritmetico.MENOS,a,b);:}
    |expresion:a POR expresion:b                    {:return new ExpresionNumerica(OperadorAritmetico.POR,a,b);:}
    |expresion:a DIV expresion:b                    {:return new ExpresionNumerica(OperadorAritmetico.DIV,a,b);:}
    |expresion:a POT expresion:b                    {:return new ExpresionNumerica(OperadorAritmetico.POT,a,b);:}                                                    {:return a;:}
    |MENOS expresion:a                              {:return new ExpresionNumerica(OperadorAritmetico.MENOS,a);:}%prec UMENOS
    ;
expresion_relacional::=
    expresion:a MAYQUE expresion:b                  {:return new ExpresionRelacional(OperadorRelacional.MAYQUE,a,b);:}
    |expresion:a MAYIGUAL expresion:b               {:return new ExpresionRelacional(OperadorRelacional.MAYIGUAL,a,b);:}
    |expresion:a MENQUE expresion:b                 {:return new ExpresionRelacional(OperadorRelacional.MENQUE,a,b);:}
    |expresion:a MENIGUAL expresion:b               {:return new ExpresionRelacional(OperadorRelacional.MENIGUAL,a,b);:}
    |expresion:a IGUALACION expresion:b             {:return new ExpresionRelacional(OperadorRelacional.IGUALACION,a,b);:}
    |expresion:a DIFERENCIACION expresion:b        {:return new ExpresionRelacional(OperadorRelacional.DIFERENCIACION,a,b);:}
    ;
expresion_logica::=
    expresion:a OR expresion                        {:return new ExpresionLogica(OperadorRelacional.OR,a,b);:}
    |expresion:a AND expresion                      {:return new ExpresionLogica(OperadorRelacional.AND,a,b);:}
    |NOT expresion:a                                {:return new ExpresionLogica(OperadorRelacional.NOT,a);:}
    ;
idarreglo::= IDENTIFICADOR dimensiones
            ;
dimensiones::= dimensiones dimension
            | dimension;
dimension::= CORIZQ expresion CORDER
            |CORIZQ CORIZQ expresion CORDER CORDER
            ;
primitivo::=
    NUMERO:a                                        {:return new Primitivo();:}
    |DECIMAL:a                                      {:return new Primitivo();:}
    |CADENA:a                                       {:return new Primitivo();:}
    |IDENTIFICADOR:a                                {:return new Primitivo();:}
    |RTRUE
    |RFALSE
    |idarreglo
    |llamada
    ;