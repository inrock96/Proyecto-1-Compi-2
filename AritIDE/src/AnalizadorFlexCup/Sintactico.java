
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorFlexCup;

import AST.NodoAST;
import Expresiones.Identificador;
import Expresiones.Expresion;
import Expresiones.Primitivo;
import Expresiones.Ternario;
import TablaDeSimbolos.Tipo;
import Expresiones.ExpresionLogica;
import Expresiones.ExpresionNumerica;
import Expresiones.ExpresionRelacional;
import Instrucciones.Asignacion;
import java_cup.runtime.*;
import java.util.*;
import GUI.Ventana;
import Instrucciones.If;
import Expresiones.Funciones.Print;
import TablaDeSimbolos.NodoError;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\017\003\000\002\017\007" +
    "\000\002\017\012\000\002\017\011\000\002\017\011\000" +
    "\002\017\010\000\002\017\006\000\002\017\011\000\002" +
    "\017\010\000\002\017\011\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\017\010\000\002\017\003" +
    "\000\002\017\004\000\002\017\004\000\002\014\006\000" +
    "\002\014\005\000\002\007\010\000\002\007\012\000\002" +
    "\007\010\000\002\005\004\000\002\005\003\000\002\015" +
    "\004\000\002\015\007\000\002\015\004\000\002\015\004" +
    "\000\002\015\003\000\002\015\007\000\002\015\012\000" +
    "\002\015\011\000\002\015\011\000\002\015\010\000\002" +
    "\015\006\000\002\015\011\000\002\015\010\000\002\015" +
    "\011\000\002\015\004\000\002\015\007\000\002\015\006" +
    "\000\002\015\010\000\002\015\003\000\002\015\006\000" +
    "\002\015\005\000\002\015\003\000\002\015\006\000\002" +
    "\015\003\000\002\015\003\000\002\020\007\000\002\020" +
    "\010\000\002\020\012\000\002\020\011\000\002\004\005" +
    "\000\002\004\003\000\002\012\005\000\002\012\003\000" +
    "\002\025\005\000\002\025\003\000\002\026\005\000\002" +
    "\026\005\000\002\011\005\000\002\023\006\000\002\024" +
    "\005\000\002\006\004\000\002\006\003\000\002\016\010" +
    "\000\002\010\005\000\002\010\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\005\000\002" +
    "\031\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\004\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\004\000\002\033\007\000\002\021\004\000\002\013\004" +
    "\000\002\013\003\000\002\022\005\000\002\022\007\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\020\003\014\036\006\037\007\042\015\045" +
    "\016\051\005\063\021\001\002\000\026\002\ufff1\003\ufff1" +
    "\004\374\010\ufff1\036\ufff1\037\ufff1\042\ufff1\045\ufff1\051" +
    "\ufff1\063\ufff1\001\002\000\004\005\365\001\002\000\004" +
    "\005\361\001\002\000\004\005\341\001\002\000\022\002" +
    "\000\003\014\036\006\037\007\042\015\045\016\051\005" +
    "\063\021\001\002\000\024\002\ufffe\003\ufffe\010\ufffe\036" +
    "\ufffe\037\ufffe\042\ufffe\045\ufffe\051\ufffe\063\ufffe\001\002" +
    "\000\026\002\uffef\003\uffef\004\340\010\uffef\036\uffef\037" +
    "\uffef\042\uffef\045\uffef\051\uffef\063\uffef\001\002\000\024" +
    "\002\ufffd\003\ufffd\010\ufffd\036\ufffd\037\ufffd\042\ufffd\045" +
    "\ufffd\051\ufffd\063\ufffd\001\002\000\006\004\337\010\336" +
    "\001\002\000\006\003\065\007\064\001\002\000\004\005" +
    "\322\001\002\000\004\006\317\001\002\000\004\060\315" +
    "\001\002\000\010\005\025\011\024\060\026\001\002\000" +
    "\004\002\023\001\002\000\004\002\001\001\002\000\032" +
    "\005\060\011\310\016\032\031\040\032\050\033\036\034" +
    "\034\046\044\055\052\056\053\057\046\063\062\001\002" +
    "\000\032\005\060\006\306\016\032\031\040\032\050\033" +
    "\036\034\034\046\044\055\052\056\053\057\046\063\062" +
    "\001\002\000\032\005\041\016\032\031\040\032\050\033" +
    "\036\034\034\046\044\053\035\055\052\056\053\057\046" +
    "\063\051\001\002\000\112\002\uffa2\003\uffa2\004\uffa2\006" +
    "\uffa2\010\uffa2\011\024\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\036\uffa2\037\uffa2" +
    "\042\uffa2\044\uffa2\045\uffa2\047\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\054\uffa2\055\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2" +
    "\001\002\000\112\002\uffa0\003\uffa0\004\uffa0\006\uffa0\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\036\uffa0\037\uffa0\042\uffa0" +
    "\044\uffa0\045\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\054" +
    "\uffa0\055\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\001\002" +
    "\000\112\002\uffa1\003\uffa1\004\uffa1\006\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\036\uffa1\037\uffa1\042\uffa1\044\uffa1" +
    "\045\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\054\uffa1\055" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\001\002\000\030" +
    "\005\060\016\032\031\040\032\050\033\036\034\034\046" +
    "\044\055\052\056\053\057\046\063\062\001\002\000\106" +
    "\002\uffb8\003\uffb8\004\uffb8\006\uffb8\010\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\036\uffb8\037\uffb8\042\uffb8\044\uffb8\045\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\001\002\000\106\002\uff9b\003\uff9b\004\uff9b" +
    "\006\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\030\uff9b\036\uff9b\037\uff9b\042" +
    "\uff9b\044\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b" +
    "\054\uff9b\055\uff9b\061\uff9b\062\uff9b\063\uff9b\001\002\000" +
    "\004\005\277\001\002\000\106\002\uff9c\003\uff9c\004\uff9c" +
    "\006\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016" +
    "\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\030\uff9c\036\uff9c\037\uff9c\042" +
    "\uff9c\044\uff9c\045\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\054\uff9c\055\uff9c\061\uff9c\062\uff9c\063\uff9c\001\002\000" +
    "\076\002\uffc2\003\uffc2\004\uffc2\010\uffc2\015\135\016\125" +
    "\017\132\020\136\021\127\022\130\023\133\024\141\025" +
    "\131\026\134\027\142\030\123\036\uffc2\037\uffc2\042\uffc2" +
    "\044\126\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\054" +
    "\uffc2\055\uffc2\061\137\062\140\063\uffc2\001\002\000\030" +
    "\005\060\016\032\031\040\032\050\033\036\034\034\046" +
    "\044\055\052\056\053\057\046\063\062\001\002\000\032" +
    "\005\060\006\273\016\032\031\040\032\050\033\036\034" +
    "\034\046\044\055\052\056\053\057\046\063\117\001\002" +
    "\000\106\002\uffb4\003\uffb4\004\uffb4\006\uffb4\010\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\036\uffb4\037\uffb4\042\uffb4\044\uffb4\045\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\001\002\000\106\002\uff95\003\uff95" +
    "\004\uff95\006\uff95\010\uff95\012\uff95\013\uff95\014\uff95\015" +
    "\uff95\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\036\uff95\037" +
    "\uff95\042\uff95\044\uff95\045\uff95\047\uff95\050\uff95\051\uff95" +
    "\052\uff95\054\uff95\055\uff95\061\uff95\062\uff95\063\uff95\001" +
    "\002\000\106\002\uff97\003\uff97\004\uff97\006\uff97\010\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\030\uff97\036\uff97\037\uff97\042\uff97\044\uff97\045" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\054\uff97\055\uff97" +
    "\061\uff97\062\uff97\063\uff97\001\002\000\106\002\uffb6\003" +
    "\uffb6\004\uffb6\006\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\036\uffb6" +
    "\037\uffb6\042\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\054\uffb6\055\uffb6\061\uffb6\062\uffb6\063\uffb6" +
    "\001\002\000\106\002\uff98\003\uff98\004\uff98\006\uff98\010" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\036\uff98\037\uff98\042\uff98\044\uff98" +
    "\045\uff98\047\uff98\050\uff98\051\uff98\052\uff98\054\uff98\055" +
    "\uff98\061\uff98\062\uff98\063\uff98\001\002\000\106\002\uffb7" +
    "\003\uffb7\004\uffb7\006\uffb7\010\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\036" +
    "\uffb7\037\uffb7\042\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\054\uffb7\055\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\001\002\000\106\002\uff9d\003\uff9d\004\uff9d\006\uff9d" +
    "\010\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\036\uff9d\037\uff9d\042\uff9d\044" +
    "\uff9d\045\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d" +
    "\055\uff9d\061\uff9d\062\uff9d\063\uff9d\001\002\000\070\002" +
    "\uff9a\003\uff9a\004\uff9a\005\055\010\uff9a\011\024\015\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\036\uff9a\037\uff9a" +
    "\042\uff9a\044\uff9a\045\uff9a\051\uff9a\061\uff9a\062\uff9a\063" +
    "\uff9a\001\002\000\106\002\uff94\003\uff94\004\uff94\006\uff94" +
    "\010\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\036\uff94\037\uff94\042\uff94\044" +
    "\uff94\045\uff94\047\uff94\050\uff94\051\uff94\052\uff94\054\uff94" +
    "\055\uff94\061\uff94\062\uff94\063\uff94\001\002\000\106\002" +
    "\uff99\003\uff99\004\uff99\006\uff99\010\uff99\012\uff99\013\uff99" +
    "\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022" +
    "\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99" +
    "\036\uff99\037\uff99\042\uff99\044\uff99\045\uff99\047\uff99\050" +
    "\uff99\051\uff99\052\uff99\054\uff99\055\uff99\061\uff99\062\uff99" +
    "\063\uff99\001\002\000\106\002\uff96\003\uff96\004\uff96\006" +
    "\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\036\uff96\037\uff96\042\uff96" +
    "\044\uff96\045\uff96\047\uff96\050\uff96\051\uff96\052\uff96\054" +
    "\uff96\055\uff96\061\uff96\062\uff96\063\uff96\001\002\000\032" +
    "\005\060\006\061\016\032\031\040\032\050\033\036\034" +
    "\034\046\044\055\052\056\053\057\046\063\062\001\002" +
    "\000\006\006\272\014\210\001\002\000\044\006\uffc7\014" +
    "\uffc7\015\135\016\125\017\132\020\136\021\127\022\130" +
    "\023\133\024\141\025\131\026\134\027\142\030\123\044" +
    "\126\061\137\062\140\001\002\000\030\005\060\016\032" +
    "\031\040\032\050\033\036\034\034\046\044\055\052\056" +
    "\053\057\046\063\062\001\002\000\066\002\uffeb\003\uffeb" +
    "\004\uffeb\010\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\036\uffeb\037\uffeb\042\uffeb\043\063\044\uffeb\045" +
    "\uffeb\051\uffeb\061\uffeb\062\uffeb\063\uffeb\001\002\000\112" +
    "\002\uff9a\003\uff9a\004\uff9a\005\025\006\uff9a\010\uff9a\011" +
    "\024\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\036\uff9a\037\uff9a\042\uff9a\044\uff9a" +
    "\045\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\054\uff9a\055" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\001\002\000\006\003\065" +
    "\007\064\001\002\000\024\036\072\037\007\042\100\045" +
    "\101\050\070\051\071\052\075\054\073\063\103\001\002" +
    "\000\040\002\uffb9\003\uffb9\010\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\042\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\054\uffb9\055\uffb9\063\uffb9\001\002\000\024\002\ufff6\003" +
    "\ufff6\010\ufff6\036\ufff6\037\ufff6\042\ufff6\045\ufff6\051\ufff6" +
    "\063\ufff6\001\002\000\026\010\271\036\072\037\007\042" +
    "\100\045\101\050\070\051\071\052\075\054\073\063\103" +
    "\001\002\000\034\004\270\010\uffd0\036\uffd0\037\uffd0\042" +
    "\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\054\uffd0" +
    "\055\uffd0\063\uffd0\001\002\000\004\005\246\001\002\000" +
    "\004\005\242\001\002\000\034\004\241\010\uffcd\036\uffcd" +
    "\037\uffcd\042\uffcd\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\054\uffcd\055\uffcd\063\uffcd\001\002\000\032\010\uffe6" +
    "\036\uffe6\037\uffe6\042\uffe6\045\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\054\uffe6\055\uffe6\063\uffe6\001\002\000\036" +
    "\004\235\005\234\010\uffce\036\uffce\037\uffce\042\uffce\045" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\054\uffce\055\uffce" +
    "\063\uffce\001\002\000\034\004\233\010\uffd3\036\uffd3\037" +
    "\uffd3\042\uffd3\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\054\uffd3\055\uffd3\063\uffd3\001\002\000\032\010\uffe1\036" +
    "\uffe1\037\uffe1\042\uffe1\045\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\054\uffe1\055\uffe1\063\uffe1\001\002\000\006\003" +
    "\065\007\064\001\002\000\004\005\217\001\002\000\004" +
    "\006\214\001\002\000\010\005\104\011\024\060\105\001" +
    "\002\000\032\005\060\006\206\016\032\031\040\032\050" +
    "\033\036\034\034\046\044\055\052\056\053\057\046\063" +
    "\062\001\002\000\032\005\107\016\032\031\040\032\050" +
    "\033\036\034\034\046\044\053\106\055\052\056\053\057" +
    "\046\063\110\001\002\000\004\005\177\001\002\000\032" +
    "\005\060\006\116\016\032\031\040\032\050\033\036\034" +
    "\034\046\044\055\052\056\053\057\046\063\117\001\002" +
    "\000\076\004\uff9a\005\111\010\uff9a\011\024\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\030\uff9a\036\uff9a\037\uff9a\042" +
    "\uff9a\044\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\054\uff9a\055\uff9a\061\uff9a\062\uff9a\063\uff9a\001\002\000" +
    "\032\005\060\006\112\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\074\004\uffeb\010\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\036\uffeb\037\uffeb\042\uffeb\043\113" +
    "\044\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\054" +
    "\uffeb\055\uffeb\061\uffeb\062\uffeb\063\uffeb\001\002\000\006" +
    "\003\065\007\064\001\002\000\032\010\uffda\036\uffda\037" +
    "\uffda\042\uffda\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda" +
    "\054\uffda\055\uffda\063\uffda\001\002\000\042\006\176\015" +
    "\135\016\125\017\132\020\136\021\127\022\130\023\133" +
    "\024\141\025\131\026\134\027\142\030\123\044\126\061" +
    "\137\062\140\001\002\000\004\043\174\001\002\000\052" +
    "\005\025\006\uff9a\011\024\014\120\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\044\uff9a\060\121\061\uff9a\062" +
    "\uff9a\001\002\000\004\063\163\001\002\000\030\005\060" +
    "\016\032\031\040\032\050\033\036\034\034\046\044\055" +
    "\052\056\053\057\046\063\062\001\002\000\044\006\uffe8" +
    "\014\124\015\135\016\125\017\132\020\136\021\127\022" +
    "\130\023\133\024\141\025\131\026\134\027\142\030\123" +
    "\044\126\061\137\062\140\001\002\000\030\005\060\016" +
    "\032\031\040\032\050\033\036\034\034\046\044\055\052" +
    "\056\053\057\046\063\062\001\002\000\004\063\163\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\106\002\uffa6\003\uffa6\004\uffa6\006\uffa6\010\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\135\016\125\017\132\020" +
    "\136\021\127\022\130\023\133\024\141\025\131\026\134" +
    "\027\uffa6\030\123\036\uffa6\037\uffa6\042\uffa6\044\126\045" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\054\uffa6\055\uffa6" +
    "\061\137\062\140\063\uffa6\001\002\000\106\002\uffac\003" +
    "\uffac\004\uffac\006\uffac\010\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\135\016\125\017\132\020\136\021\127\022\130\023" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\036\uffac" +
    "\037\uffac\042\uffac\044\uffac\045\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\054\uffac\055\uffac\061\137\062\uffac\063\uffac" +
    "\001\002\000\106\002\uffa8\003\uffa8\004\uffa8\006\uffa8\010" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\135\016\125\017\132" +
    "\020\136\021\127\022\130\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\036\uffa8\037\uffa8\042\uffa8\044\uffa8" +
    "\045\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\054\uffa8\055" +
    "\uffa8\061\137\062\uffa8\063\uffa8\001\002\000\042\013\147" +
    "\015\135\016\125\017\132\020\136\021\127\022\130\023" +
    "\133\024\141\025\131\026\134\027\142\030\123\044\126" +
    "\061\137\062\140\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\053" +
    "\057\046\063\062\001\002\000\106\002\uffa3\003\uffa3\004" +
    "\uffa3\006\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3\015\135" +
    "\016\125\017\132\020\136\021\127\022\130\023\133\024" +
    "\141\025\131\026\134\027\142\030\123\036\uffa3\037\uffa3" +
    "\042\uffa3\044\126\045\uffa3\047\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\054\uffa3\055\uffa3\061\137\062\140\063\uffa3\001\002" +
    "\000\106\002\uffaf\003\uffaf\004\uffaf\006\uffaf\010\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\127\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\036\uffaf\037\uffaf\042\uffaf\044\uffaf\045\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf\055\uffaf\061" +
    "\137\062\uffaf\063\uffaf\001\002\000\106\002\uffb3\003\uffb3" +
    "\004\uffb3\006\uffb3\010\uffb3\012\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\132\020\136\021\127\022\130\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\036\uffb3\037" +
    "\uffb3\042\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\054\uffb3\055\uffb3\061\137\062\uffb3\063\uffb3\001" +
    "\002\000\106\002\uffab\003\uffab\004\uffab\006\uffab\010\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\135\016\125\017\132\020" +
    "\136\021\127\022\130\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\036\uffab\037\uffab\042\uffab\044\uffab\045" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\054\uffab\055\uffab" +
    "\061\137\062\uffab\063\uffab\001\002\000\106\002\uffaa\003" +
    "\uffaa\004\uffaa\006\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\135\016\125\017\132\020\136\021\127\022\130\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\036\uffaa" +
    "\037\uffaa\042\uffaa\044\uffaa\045\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\052\uffaa\054\uffaa\055\uffaa\061\137\062\uffaa\063\uffaa" +
    "\001\002\000\106\002\uffb1\003\uffb1\004\uffb1\006\uffb1\010" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\020\uffb1\021\127\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\036\uffb1\037\uffb1\042\uffb1\044\uffb1" +
    "\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1\055" +
    "\uffb1\061\137\062\uffb1\063\uffb1\001\002\000\106\002\uffa9" +
    "\003\uffa9\004\uffa9\006\uffa9\010\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\135\016\125\017\132\020\136\021\127\022\130" +
    "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\036" +
    "\uffa9\037\uffa9\042\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\054\uffa9\055\uffa9\061\137\062\uffa9\063" +
    "\uffa9\001\002\000\106\002\uffb0\003\uffb0\004\uffb0\006\uffb0" +
    "\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\127\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\036\uffb0\037\uffb0\042\uffb0\044" +
    "\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\054\uffb0" +
    "\055\uffb0\061\137\062\uffb0\063\uffb0\001\002\000\106\002" +
    "\uffae\003\uffae\004\uffae\006\uffae\010\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\127\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\036\uffae\037\uffae\042\uffae\044\uffae\045\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\054\uffae\055\uffae\061\137\062\uffae" +
    "\063\uffae\001\002\000\106\002\uffa7\003\uffa7\004\uffa7\006" +
    "\uffa7\010\uffa7\012\uffa7\013\uffa7\014\uffa7\015\135\016\125" +
    "\017\132\020\136\021\127\022\130\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\036\uffa7\037\uffa7\042\uffa7" +
    "\044\uffa7\045\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\054" +
    "\uffa7\055\uffa7\061\137\062\uffa7\063\uffa7\001\002\000\106" +
    "\002\uffb2\003\uffb2\004\uffb2\006\uffb2\010\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\132\020\136\021\127" +
    "\022\130\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\036\uffb2\037\uffb2\042\uffb2\044\uffb2\045\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\054\uffb2\055\uffb2\061\137\062" +
    "\uffb2\063\uffb2\001\002\000\010\006\uffc3\014\uffc3\060\170" +
    "\001\002\000\006\006\uffe9\014\166\001\002\000\006\006" +
    "\uffc5\014\uffc5\001\002\000\004\063\163\001\002\000\006" +
    "\006\uffc6\014\uffc6\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\053" +
    "\057\046\063\062\001\002\000\044\006\uffc4\014\uffc4\015" +
    "\135\016\125\017\132\020\136\021\127\022\130\023\133" +
    "\024\141\025\131\026\134\027\142\030\123\044\126\061" +
    "\137\062\140\001\002\000\106\002\uffa5\003\uffa5\004\uffa5" +
    "\006\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5\015\135\016" +
    "\125\017\132\020\136\021\127\022\130\023\133\024\141" +
    "\025\131\026\134\027\uffa5\030\uffa5\036\uffa5\037\uffa5\042" +
    "\uffa5\044\126\045\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\054\uffa5\055\uffa5\061\137\062\140\063\uffa5\001\002\000" +
    "\006\006\uffea\014\166\001\002\000\006\003\065\007\064" +
    "\001\002\000\032\010\uffd9\036\uffd9\037\uffd9\042\uffd9\045" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\055\uffd9" +
    "\063\uffd9\001\002\000\106\002\uffb5\003\uffb5\004\uffb5\006" +
    "\uffb5\010\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\036\uffb5\037\uffb5\042\uffb5" +
    "\044\uffb5\045\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054" +
    "\uffb5\055\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000\006" +
    "\006\200\063\163\001\002\000\006\003\065\007\064\001" +
    "\002\000\006\006\202\014\166\001\002\000\006\003\065" +
    "\007\064\001\002\000\032\010\uffdd\036\uffdd\037\uffdd\042" +
    "\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\054\uffdd" +
    "\055\uffdd\063\uffdd\001\002\000\032\010\uffdc\036\uffdc\037" +
    "\uffdc\042\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\054\uffdc\055\uffdc\063\uffdc\001\002\000\006\006\211\014" +
    "\210\001\002\000\034\004\207\010\uffd1\036\uffd1\037\uffd1" +
    "\042\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\054" +
    "\uffd1\055\uffd1\063\uffd1\001\002\000\032\010\uffd5\036\uffd5" +
    "\037\uffd5\042\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\054\uffd5\055\uffd5\063\uffd5\001\002\000\030\005\060" +
    "\016\032\031\040\032\050\033\036\034\034\046\044\055" +
    "\052\056\053\057\046\063\062\001\002\000\034\004\212" +
    "\010\uffd2\036\uffd2\037\uffd2\042\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2\063\uffd2\001\002" +
    "\000\032\010\uffd6\036\uffd6\037\uffd6\042\uffd6\045\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\054\uffd6\055\uffd6\063\uffd6" +
    "\001\002\000\044\006\uffc8\014\uffc8\015\135\016\125\017" +
    "\132\020\136\021\127\022\130\023\133\024\141\025\131" +
    "\026\134\027\142\030\123\044\126\061\137\062\140\001" +
    "\002\000\004\043\215\001\002\000\006\003\065\007\064" +
    "\001\002\000\032\010\uffdb\036\uffdb\037\uffdb\042\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb" +
    "\063\uffdb\001\002\000\004\063\220\001\002\000\004\041" +
    "\221\001\002\000\030\005\060\016\032\031\040\032\050" +
    "\033\036\034\034\046\044\055\052\056\053\057\046\063" +
    "\062\001\002\000\042\006\223\015\135\016\125\017\132" +
    "\020\136\021\127\022\130\023\133\024\141\025\131\026" +
    "\134\027\142\030\123\044\126\061\137\062\140\001\002" +
    "\000\006\003\065\007\064\001\002\000\032\010\uffde\036" +
    "\uffde\037\uffde\042\uffde\045\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\054\uffde\055\uffde\063\uffde\001\002\000\004\036" +
    "\226\001\002\000\004\005\227\001\002\000\030\005\060" +
    "\016\032\031\040\032\050\033\036\034\034\046\044\055" +
    "\052\056\053\057\046\063\062\001\002\000\042\006\231" +
    "\015\135\016\125\017\132\020\136\021\127\022\130\023" +
    "\133\024\141\025\131\026\134\027\142\030\123\044\126" +
    "\061\137\062\140\001\002\000\034\004\232\010\uffd4\036" +
    "\uffd4\037\uffd4\042\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\054\uffd4\055\uffd4\063\uffd4\001\002\000\032\010" +
    "\uffd8\036\uffd8\037\uffd8\042\uffd8\045\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\054\uffd8\055\uffd8\063\uffd8\001\002\000" +
    "\032\010\uffd7\036\uffd7\037\uffd7\042\uffd7\045\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\054\uffd7\055\uffd7\063\uffd7\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\053\057\046\063\062\001" +
    "\002\000\032\010\uffe3\036\uffe3\037\uffe3\042\uffe3\045\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3\055\uffe3\063" +
    "\uffe3\001\002\000\042\006\237\015\135\016\125\017\132" +
    "\020\136\021\127\022\130\023\133\024\141\025\131\026" +
    "\134\027\142\030\123\044\126\061\137\062\140\001\002" +
    "\000\034\004\240\010\uffcf\036\uffcf\037\uffcf\042\uffcf\045" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\054\uffcf\055\uffcf" +
    "\063\uffcf\001\002\000\032\010\uffe4\036\uffe4\037\uffe4\042" +
    "\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\054\uffe4" +
    "\055\uffe4\063\uffe4\001\002\000\032\010\uffe2\036\uffe2\037" +
    "\uffe2\042\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\054\uffe2\055\uffe2\063\uffe2\001\002\000\030\005\060\016" +
    "\032\031\040\032\050\033\036\034\034\046\044\055\052" +
    "\056\053\057\046\063\062\001\002\000\042\006\244\015" +
    "\135\016\125\017\132\020\136\021\127\022\130\023\133" +
    "\024\141\025\131\026\134\027\142\030\123\044\126\061" +
    "\137\062\140\001\002\000\006\003\065\007\064\001\002" +
    "\000\032\010\uffe0\036\uffe0\037\uffe0\042\uffe0\045\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\054\uffe0\055\uffe0\063\uffe0" +
    "\001\002\000\030\005\060\016\032\031\040\032\050\033" +
    "\036\034\034\046\044\055\052\056\053\057\046\063\062" +
    "\001\002\000\042\006\250\015\135\016\125\017\132\020" +
    "\136\021\127\022\130\023\133\024\141\025\131\026\134" +
    "\027\142\030\123\044\126\061\137\062\140\001\002\000" +
    "\004\007\251\001\002\000\002\001\002\000\006\047\255" +
    "\055\253\001\002\000\004\013\265\001\002\000\004\047" +
    "\255\001\002\000\030\005\060\016\032\031\040\032\050" +
    "\033\036\034\034\046\044\055\052\056\053\057\046\063" +
    "\062\001\002\000\004\010\257\001\002\000\032\010\uffdf" +
    "\036\uffdf\037\uffdf\042\uffdf\045\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\054\uffdf\055\uffdf\063\uffdf\001\002\000\042" +
    "\013\261\015\135\016\125\017\132\020\136\021\127\022" +
    "\130\023\133\024\141\025\131\026\134\027\142\030\123" +
    "\044\126\061\137\062\140\001\002\000\024\036\072\037" +
    "\007\042\100\045\101\050\070\051\071\052\075\054\073" +
    "\063\103\001\002\000\030\036\072\037\007\042\100\045" +
    "\101\047\uffbf\050\070\051\071\052\075\054\073\055\uffbf" +
    "\063\103\001\002\000\032\010\uffe7\036\uffe7\037\uffe7\042" +
    "\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\054\uffe7" +
    "\055\uffe7\063\uffe7\001\002\000\006\047\uffc0\055\uffc0\001" +
    "\002\000\020\003\014\036\006\037\007\042\015\045\016" +
    "\051\005\063\021\001\002\000\022\003\014\010\uffbe\036" +
    "\006\037\007\042\015\045\016\051\005\063\021\001\002" +
    "\000\024\002\uffff\003\uffff\010\uffff\036\uffff\037\uffff\042" +
    "\uffff\045\uffff\051\uffff\063\uffff\001\002\000\032\010\uffe5" +
    "\036\uffe5\037\uffe5\042\uffe5\045\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\054\uffe5\055\uffe5\063\uffe5\001\002\000\040" +
    "\002\uffba\003\uffba\010\uffba\036\uffba\037\uffba\040\uffba\042" +
    "\uffba\045\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba" +
    "\055\uffba\063\uffba\001\002\000\106\002\uffec\003\uffec\004" +
    "\uffec\006\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\036\uffec\037\uffec" +
    "\042\uffec\044\uffec\045\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\054\uffec\055\uffec\061\uffec\062\uffec\063\uffec\001\002" +
    "\000\004\043\274\001\002\000\006\003\065\007\064\001" +
    "\002\000\024\002\ufff5\003\ufff5\010\ufff5\036\ufff5\037\ufff5" +
    "\042\ufff5\045\ufff5\051\ufff5\063\ufff5\001\002\000\106\002" +
    "\uffa4\003\uffa4\004\uffa4\006\uffa4\010\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\036\uffa4\037\uffa4\042\uffa4\044\uffa4\045\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\054\uffa4\055\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\001\002\000\006\006\300\063\163\001\002\000" +
    "\006\003\065\007\064\001\002\000\006\006\302\014\166" +
    "\001\002\000\006\003\065\007\064\001\002\000\024\002" +
    "\ufff9\003\ufff9\010\ufff9\036\ufff9\037\ufff9\042\ufff9\045\ufff9" +
    "\051\ufff9\063\ufff9\001\002\000\024\002\ufff8\003\ufff8\010" +
    "\ufff8\036\ufff8\037\ufff8\042\ufff8\045\ufff8\051\ufff8\063\ufff8" +
    "\001\002\000\106\002\uffad\003\uffad\004\uffad\006\uffad\010" +
    "\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026" +
    "\uffad\027\uffad\030\uffad\036\uffad\037\uffad\042\uffad\044\uffad" +
    "\045\uffad\047\uffad\050\uffad\051\uffad\052\uffad\054\uffad\055" +
    "\uffad\061\uffad\062\uffad\063\uffad\001\002\000\106\002\uffeb" +
    "\003\uffeb\004\uffeb\006\uffeb\010\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\036" +
    "\uffeb\037\uffeb\042\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\054\uffeb\055\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\001\002\000\042\012\314\015\135\016\125\017\132" +
    "\020\136\021\127\022\130\023\133\024\141\025\131\026" +
    "\134\027\142\030\123\044\126\061\137\062\140\001\002" +
    "\000\030\005\060\016\032\031\040\032\050\033\036\034" +
    "\034\046\044\055\052\056\053\057\046\063\062\001\002" +
    "\000\042\012\312\015\135\016\125\017\132\020\136\021" +
    "\127\022\130\023\133\024\141\025\131\026\134\027\142" +
    "\030\123\044\126\061\137\062\140\001\002\000\004\012" +
    "\313\001\002\000\112\002\uff9e\003\uff9e\004\uff9e\006\uff9e" +
    "\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\030\uff9e\036\uff9e\037\uff9e\042" +
    "\uff9e\044\uff9e\045\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\054\uff9e\055\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\001" +
    "\002\000\112\002\uff9f\003\uff9f\004\uff9f\006\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\036\uff9f\037\uff9f\042\uff9f\044" +
    "\uff9f\045\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\054\uff9f" +
    "\055\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\001\002\000" +
    "\030\005\060\016\032\031\040\032\050\033\036\034\034" +
    "\046\044\055\052\056\053\057\046\063\062\001\002\000" +
    "\076\002\uffc1\003\uffc1\004\uffc1\010\uffc1\015\135\016\125" +
    "\017\132\020\136\021\127\022\130\023\133\024\141\025" +
    "\131\026\134\027\142\030\123\036\uffc1\037\uffc1\042\uffc1" +
    "\044\126\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\054" +
    "\uffc1\055\uffc1\061\137\062\140\063\uffc1\001\002\000\004" +
    "\043\320\001\002\000\006\003\065\007\064\001\002\000" +
    "\024\002\ufff7\003\ufff7\010\ufff7\036\ufff7\037\ufff7\042\ufff7" +
    "\045\ufff7\051\ufff7\063\ufff7\001\002\000\004\063\323\001" +
    "\002\000\004\041\324\001\002\000\030\005\060\016\032" +
    "\031\040\032\050\033\036\034\034\046\044\055\052\056" +
    "\053\057\046\063\062\001\002\000\042\006\326\015\135" +
    "\016\125\017\132\020\136\021\127\022\130\023\133\024" +
    "\141\025\131\026\134\027\142\030\123\044\126\061\137" +
    "\062\140\001\002\000\006\003\065\007\064\001\002\000" +
    "\024\002\ufffa\003\ufffa\010\ufffa\036\ufffa\037\ufffa\042\ufffa" +
    "\045\ufffa\051\ufffa\063\ufffa\001\002\000\004\036\331\001" +
    "\002\000\004\005\332\001\002\000\030\005\060\016\032" +
    "\031\040\032\050\033\036\034\034\046\044\055\052\056" +
    "\053\057\046\063\062\001\002\000\042\006\334\015\135" +
    "\016\125\017\132\020\136\021\127\022\130\023\133\024" +
    "\141\025\131\026\134\027\142\030\123\044\126\061\137" +
    "\062\140\001\002\000\026\002\ufff0\003\ufff0\004\335\010" +
    "\ufff0\036\ufff0\037\ufff0\042\ufff0\045\ufff0\051\ufff0\063\ufff0" +
    "\001\002\000\024\002\ufff4\003\ufff4\010\ufff4\036\ufff4\037" +
    "\ufff4\042\ufff4\045\ufff4\051\ufff4\063\ufff4\001\002\000\024" +
    "\002\uffed\003\uffed\010\uffed\036\uffed\037\uffed\042\uffed\045" +
    "\uffed\051\uffed\063\uffed\001\002\000\024\002\uffee\003\uffee" +
    "\010\uffee\036\uffee\037\uffee\042\uffee\045\uffee\051\uffee\063" +
    "\uffee\001\002\000\024\002\ufff3\003\ufff3\010\ufff3\036\ufff3" +
    "\037\ufff3\042\ufff3\045\ufff3\051\ufff3\063\ufff3\001\002\000" +
    "\030\005\060\016\032\031\040\032\050\033\036\034\034" +
    "\046\044\055\052\056\053\057\046\063\062\001\002\000" +
    "\042\006\343\015\135\016\125\017\132\020\136\021\127" +
    "\022\130\023\133\024\141\025\131\026\134\027\142\030" +
    "\123\044\126\061\137\062\140\001\002\000\006\003\065" +
    "\007\064\001\002\000\040\002\uffcc\003\uffcc\010\uffcc\036" +
    "\uffcc\037\uffcc\040\345\042\uffcc\045\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\054\uffcc\055\uffcc\063\uffcc\001\002\000" +
    "\010\003\065\007\064\037\352\001\002\000\040\002\uffcb" +
    "\003\uffcb\010\uffcb\036\uffcb\037\uffcb\040\350\042\uffcb\045" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb" +
    "\063\uffcb\001\002\000\040\002\uffbc\003\uffbc\010\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\042\uffbc\045\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\054\uffbc\055\uffbc\063\uffbc\001\002\000" +
    "\010\003\065\007\064\037\352\001\002\000\040\002\uffbd" +
    "\003\uffbd\010\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\045" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd" +
    "\063\uffbd\001\002\000\004\005\354\001\002\000\036\002" +
    "\uffca\003\uffca\010\uffca\036\uffca\037\uffca\042\uffca\045\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\054\uffca\055\uffca\063" +
    "\uffca\001\002\000\030\005\060\016\032\031\040\032\050" +
    "\033\036\034\034\046\044\055\052\056\053\057\046\063" +
    "\062\001\002\000\042\006\356\015\135\016\125\017\132" +
    "\020\136\021\127\022\130\023\133\024\141\025\131\026" +
    "\134\027\142\030\123\044\126\061\137\062\140\001\002" +
    "\000\006\003\065\007\064\001\002\000\040\002\uffbb\003" +
    "\uffbb\010\uffbb\036\uffbb\037\uffbb\040\uffbb\042\uffbb\045\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\063" +
    "\uffbb\001\002\000\036\002\uffc9\003\uffc9\010\uffc9\036\uffc9" +
    "\037\uffc9\042\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\054\uffc9\055\uffc9\063\uffc9\001\002\000\030\005\060" +
    "\016\032\031\040\032\050\033\036\034\034\046\044\055" +
    "\052\056\053\057\046\063\062\001\002\000\042\006\363" +
    "\015\135\016\125\017\132\020\136\021\127\022\130\023" +
    "\133\024\141\025\131\026\134\027\142\030\123\044\126" +
    "\061\137\062\140\001\002\000\006\003\065\007\064\001" +
    "\002\000\024\002\ufffc\003\ufffc\010\ufffc\036\ufffc\037\ufffc" +
    "\042\ufffc\045\ufffc\051\ufffc\063\ufffc\001\002\000\030\005" +
    "\060\016\032\031\040\032\050\033\036\034\034\046\044" +
    "\055\052\056\053\057\046\063\062\001\002\000\042\006" +
    "\367\015\135\016\125\017\132\020\136\021\127\022\130" +
    "\023\133\024\141\025\131\026\134\027\142\030\123\044" +
    "\126\061\137\062\140\001\002\000\004\007\370\001\002" +
    "\000\002\001\002\000\006\047\255\055\253\001\002\000" +
    "\004\010\373\001\002\000\024\002\ufffb\003\ufffb\010\ufffb" +
    "\036\ufffb\037\ufffb\042\ufffb\045\ufffb\051\ufffb\063\ufffb\001" +
    "\002\000\024\002\ufff2\003\ufff2\010\ufff2\036\ufff2\037\ufff2" +
    "\042\ufff2\045\ufff2\051\ufff2\063\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\022\002\021\003\007\007\016\014\003\017" +
    "\010\020\012\021\017\026\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\016\014\003\017\266\020\012\021\017\026\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\026\022\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\042\021\053\027\032\030\041\031\306\032" +
    "\044\033\046\001\001\000\022\004\055\014\042\021\053" +
    "\027\032\030\041\031\056\032\044\033\046\001\001\000" +
    "\020\014\042\021\053\027\032\030\041\031\036\032\044" +
    "\033\046\001\001\000\004\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\042\021\053\027\032" +
    "\030\041\031\304\032\044\033\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\042\021\053\027\032\030" +
    "\041\031\275\032\044\033\046\001\001\000\020\014\042" +
    "\021\053\027\032\030\041\031\114\032\044\033\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\026\022\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\055\014\042\021\053\027\032\030\041\031\056\032\044" +
    "\033\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\042\021\053\027\032\030\041\031\114\032\044" +
    "\033\046\001\001\000\002\001\001\000\006\013\026\022" +
    "\027\001\001\000\004\010\065\001\001\000\016\005\066" +
    "\007\101\015\073\020\076\021\017\026\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\101\015\262" +
    "\020\076\021\017\026\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\026\022\027\001\001\000\022\004" +
    "\204\014\042\021\053\027\032\030\041\031\056\032\044" +
    "\033\046\001\001\000\020\014\042\021\053\027\032\030" +
    "\041\031\036\032\044\033\046\001\001\000\002\001\001" +
    "\000\020\014\042\021\053\027\032\030\041\031\114\032" +
    "\044\033\046\001\001\000\006\013\026\022\027\001\001" +
    "\000\022\004\055\014\042\021\053\027\032\030\041\031" +
    "\056\032\044\033\046\001\001\000\002\001\001\000\004" +
    "\010\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\026\022\027\001\001\000\006" +
    "\012\172\025\164\001\001\000\020\014\042\021\053\027" +
    "\032\030\041\031\121\032\044\033\046\001\001\000\002" +
    "\001\001\000\020\014\042\021\053\027\032\030\041\031" +
    "\171\032\044\033\046\001\001\000\006\012\163\025\164" +
    "\001\001\000\020\014\042\021\053\027\032\030\041\031" +
    "\161\032\044\033\046\001\001\000\020\014\042\021\053" +
    "\027\032\030\041\031\160\032\044\033\046\001\001\000" +
    "\020\014\042\021\053\027\032\030\041\031\157\032\044" +
    "\033\046\001\001\000\020\014\042\021\053\027\032\030" +
    "\041\031\156\032\044\033\046\001\001\000\020\014\042" +
    "\021\053\027\032\030\041\031\155\032\044\033\046\001" +
    "\001\000\020\014\042\021\053\027\032\030\041\031\154" +
    "\032\044\033\046\001\001\000\020\014\042\021\053\027" +
    "\032\030\041\031\153\032\044\033\046\001\001\000\020" +
    "\014\042\021\053\027\032\030\041\031\152\032\044\033" +
    "\046\001\001\000\020\014\042\021\053\027\032\030\041" +
    "\031\151\032\044\033\046\001\001\000\020\014\042\021" +
    "\053\027\032\030\041\031\150\032\044\033\046\001\001" +
    "\000\020\014\042\021\053\027\032\030\041\031\145\032" +
    "\044\033\046\001\001\000\020\014\042\021\053\027\032" +
    "\030\041\031\144\032\044\033\046\001\001\000\020\014" +
    "\042\021\053\027\032\030\041\031\143\032\044\033\046" +
    "\001\001\000\020\014\042\021\053\027\032\030\041\031" +
    "\142\032\044\033\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\042\021\053\027\032\030\041\031\147\032\044\033\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\166\001\001\000" +
    "\002\001\001\000\020\014\042\021\053\027\032\030\041" +
    "\031\170\032\044\033\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\200\025" +
    "\164\001\001\000\004\010\203\001\001\000\002\001\001" +
    "\000\004\010\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\042\021\053\027\032\030\041\031\212\032" +
    "\044\033\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\042\021\053\027\032\030\041\031\221\032" +
    "\044\033\046\001\001\000\002\001\001\000\004\010\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\042\021\053\027\032\030\041\031\227" +
    "\032\044\033\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\042" +
    "\021\053\027\032\030\041\031\235\032\044\033\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\042\021" +
    "\053\027\032\030\041\031\242\032\044\033\046\001\001" +
    "\000\002\001\001\000\004\010\244\001\001\000\002\001" +
    "\001\000\020\014\042\021\053\027\032\030\041\031\246" +
    "\032\044\033\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\251\001\001\000\006\023\253\024\255" +
    "\001\001\000\002\001\001\000\004\023\263\001\001\000" +
    "\020\014\042\021\053\027\032\030\041\031\257\032\044" +
    "\033\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\261\007\101\015\073\020\076" +
    "\021\017\026\075\001\001\000\014\007\101\015\262\020" +
    "\076\021\017\026\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\265\007\016\014\003\017\010\020" +
    "\012\021\017\026\011\001\001\000\016\007\016\014\003" +
    "\017\266\020\012\021\017\026\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\300\025\164\001\001" +
    "\000\004\010\303\001\001\000\002\001\001\000\004\010" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\042\021\053\027\032\030\041\031\310\032\044\033\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\042\021\053\027\032" +
    "\030\041\031\315\032\044\033\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\042\021\053\027\032\030\041\031\324\032\044\033\046" +
    "\001\001\000\002\001\001\000\004\010\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\042\021\053\027\032\030\041\031\332\032\044\033" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\042\021\053\027\032\030\041\031\341" +
    "\032\044\033\046\001\001\000\002\001\001\000\004\010" +
    "\343\001\001\000\006\006\345\016\346\001\001\000\004" +
    "\010\357\001\001\000\004\016\350\001\001\000\002\001" +
    "\001\000\004\010\352\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\042\021\053\027" +
    "\032\030\041\031\354\032\044\033\046\001\001\000\002" +
    "\001\001\000\004\010\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\014\042\021\053\027\032\030\041" +
    "\031\361\032\044\033\046\001\001\000\002\001\001\000" +
    "\004\010\363\001\001\000\002\001\001\000\020\014\042" +
    "\021\053\027\032\030\041\031\365\032\044\033\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\370" +
    "\001\001\000\006\023\253\024\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     *variable en la que se almacena el árbol
     *genera luego del análisis sintáctico
     */
    public LinkedList<NodoAST> AST;
    /**
     *Método que se llama automáticamente
     *al tener un error sintáctico
     */
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error, no se esperaba el caracter: "+s.value));
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error irrecuperable, no se esperaba el caracter: "+s.value));
    } 
     /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public LinkedList<NodoAST> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    parser.AST =a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>();RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= ntif 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= RWHILE PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= RSWITCH PARIZQ expresion PARDER LLAVIZQ casos defecto LLAVDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= RFOR PARIZQ IDENTIFICADOR RIN expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= IDENTIFICADOR IGUAL RFUNC PARIZQ listaparam PARDER bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= IDENTIFICADOR IGUAL RFUNC PARIZQ PARDER bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= parametros PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= IDENTIFICADOR IGUAL IDENTIFICADOR PARIZQ PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= IDENTIFICADOR IGUAL PARIZQ PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= RDO bloque RWHILE PARIZQ expresion PARDER PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= asignacion PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= llamada PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= llamada 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= RDO bloque RWHILE PARIZQ expresion PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= asignacion 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= error PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= error LLAVDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // llamada ::= IDENTIFICADOR PARIZQ listaexpresiones PARDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // llamada ::= IDENTIFICADOR PARIZQ PARDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= IDENTIFICADOR IGUAL PARIZQ IDENTIFICADOR COMA listaparam 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= IDENTIFICADOR IGUAL PARIZQ IDENTIFICADOR IGUAL expresion COMA listaparam 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros ::= IDENTIFICADOR IGUAL PARIZQ IDENTIFICADOR IGUAL expresion 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccioneslocales ::= instruccioneslocales instruccionlocal 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccioneslocales",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccioneslocales ::= instruccionlocal 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccioneslocales",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccionlocal ::= RBREAK PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccionlocal ::= RRETURN PARIZQ expresion PARDER PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccionlocal ::= RRETURN PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccionlocal ::= RCONTINUE PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccionlocal ::= ntif 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccionlocal ::= RWHILE PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccionlocal ::= RSWITCH PARIZQ expresion PARDER LLAVIZQ casos defecto LLAVDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccionlocal ::= RFOR PARIZQ IDENTIFICADOR RIN expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccionlocal ::= IDENTIFICADOR IGUAL RFUNC PARIZQ listaparam PARDER bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccionlocal ::= IDENTIFICADOR IGUAL RFUNC PARIZQ PARDER bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccionlocal ::= parametros PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccionlocal ::= IDENTIFICADOR IGUAL IDENTIFICADOR PARIZQ PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccionlocal ::= IDENTIFICADOR IGUAL PARIZQ PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccionlocal ::= RDO bloque RWHILE PARIZQ expresion PARDER PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccionlocal ::= asignacion PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccionlocal ::= IDENTIFICADOR PARIZQ listaexpresiones PARDER PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccionlocal ::= IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccionlocal ::= RDO bloque RWHILE PARIZQ expresion PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccionlocal ::= asignacion 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccionlocal ::= IDENTIFICADOR PARIZQ listaexpresiones PARDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccionlocal ::= IDENTIFICADOR PARIZQ PARDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccionlocal ::= RBREAK 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccionlocal ::= RRETURN PARIZQ expresion PARDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccionlocal ::= RRETURN 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccionlocal ::= RCONTINUE 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ntif ::= RIF PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ntif ::= RIF PARIZQ expresion PARDER bloque elseifs 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ntif ::= RIF PARIZQ expresion PARDER bloque elseifs RELSE bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ntif ::= RIF PARIZQ expresion PARDER bloque RELSE bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listaexpresiones ::= listaexpresiones COMA expresion 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaexpresiones ::= expresion 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listaparam ::= listaparam COMA param 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparam",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaparam ::= param 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparam",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // param ::= IDENTIFICADOR IGUAL expresion 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // param ::= IDENTIFICADOR 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Asignacion(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacion ::= idarreglo IGUAL expresion 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Asignacion(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // casos ::= casos caso caso 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // caso ::= RCASE expresion DOSPT instruccioneslocales 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caso",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // defecto ::= RDEFAULT DOSPT instrucciones 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defecto",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elseifs ::= elseifs elseif 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elseifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elseifs ::= elseif 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elseifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elseif ::= RELSE RIF PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elseif",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloque ::= LLAVIZQ instruccioneslocales LLAVDER 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bloque ::= error 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion_numerica 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion_logica 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion_relacional 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= primitivo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_numerica ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionNumerica(a,b,Tipo.Operador.MAS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion_numerica ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.MENOS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion_numerica ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.POR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion_numerica ::= expresion MOD expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.MOD,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion_numerica ::= expresion DIV expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.DIV,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion_numerica ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.POT,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion_numerica ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,Tipo.Operador.MENOSUNARIO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion_relacional ::= expresion MAYQUE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MAYOR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion_relacional ::= expresion MAYIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MAYIGUAL,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion_relacional ::= expresion MENQUE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MENOR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_relacional ::= expresion MENIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MENIGUAL,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_relacional ::= expresion IGUALACION expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.IGUALACION,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_relacional ::= expresion DIFERENCIACION expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.DIFERENCIACION,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion_logica ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpresionLogica(a,b,Tipo.Operador.OR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_logica ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpresionLogica(a,b,Tipo.Operador.AND,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_logica ::= NOT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpresionLogica(a,Tipo.Operador.NOT,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_logica ::= expresion TERNARIO expresion DOSPT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Ternario(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // idarreglo ::= IDENTIFICADOR dimensiones 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idarreglo",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dimensiones ::= dimensiones dimension 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensiones",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dimensiones ::= dimension 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensiones",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dimension ::= CORIZQ expresion CORDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dimension ::= CORIZQ CORIZQ expresion CORDER CORDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // primitivo ::= NUMERO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(Integer.parseInt(a),Tipo.Tipos.INTEGER,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // primitivo ::= DECIMAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(Double.parseDouble(a),Tipo.Tipos.NUMERIC,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // primitivo ::= CADENA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(a,Tipo.Tipos.STRING,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // primitivo ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Identificador(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // primitivo ::= RTRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(true,Tipo.Tipos.BOOLEANO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // primitivo ::= RFALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(false,Tipo.Tipos.BOOLEANO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // primitivo ::= RNULL 
            {
              Expresion RESULT =null;
		RESULT = null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // primitivo ::= idarreglo 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // primitivo ::= llamada 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // primitivo ::= RDEFAULT 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(a,Tipo.Tipos.DEFECTO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
