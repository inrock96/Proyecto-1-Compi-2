
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorFlexCup;

import AST.NodoAST;
import Expresiones.Identificador;
import Expresiones.Expresion;
import Expresiones.Primitivo;
import Expresiones.Ternario;
import TablaDeSimbolos.Tipo;
import Expresiones.ExpresionLogica;
import Expresiones.ExpresionNumerica;
import Expresiones.ExpresionRelacional;
import Expresiones.Funciones.Funcion;
import Instrucciones.Asignacion;
import java_cup.runtime.*;
import java.util.*;
import GUI.Ventana;
import Instrucciones.If;
import Expresiones.Llamada;
import Instrucciones.Caso;
import Instrucciones.Comprobar;
import Instrucciones.HacerMientras;
import Instrucciones.Mientras;
import Instrucciones.Para;
import TablaDeSimbolos.NodoError;
import java.awt.Dimension;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\016\003\000\002\016\007" +
    "\000\002\016\012\000\002\016\011\000\002\016\011\000" +
    "\002\016\011\000\002\016\010\000\002\016\006\000\002" +
    "\016\011\000\002\016\010\000\002\016\011\000\002\016" +
    "\004\000\002\016\004\000\002\016\003\000\002\016\010" +
    "\000\002\016\003\000\002\016\004\000\002\016\004\000" +
    "\002\013\006\000\002\013\005\000\002\033\010\000\002" +
    "\033\012\000\002\033\010\000\002\005\004\000\002\005" +
    "\003\000\002\014\004\000\002\014\007\000\002\014\004" +
    "\000\002\014\004\000\002\014\003\000\002\014\007\000" +
    "\002\014\012\000\002\014\011\000\002\014\011\000\002" +
    "\014\011\000\002\014\007\000\002\014\006\000\002\014" +
    "\010\000\002\014\003\000\002\014\006\000\002\014\005" +
    "\000\002\014\003\000\002\014\006\000\002\014\003\000" +
    "\002\014\003\000\002\017\007\000\002\017\010\000\002" +
    "\017\012\000\002\017\011\000\002\004\005\000\002\004" +
    "\003\000\002\011\005\000\002\011\003\000\002\024\005" +
    "\000\002\024\003\000\002\025\005\000\002\025\005\000" +
    "\002\034\002\000\002\010\006\000\002\022\006\000\002" +
    "\023\005\000\002\006\004\000\002\015\010\000\002\007" +
    "\005\000\002\007\004\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\005\000\002\030\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\004\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\004\000\002" +
    "\032\007\000\002\020\004\000\002\012\004\000\002\012" +
    "\003\000\002\021\005\000\002\021\007\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\020\003\014\036\006\037\007\042\015\045" +
    "\017\051\005\063\021\001\002\000\024\002\ufff0\003\ufff0" +
    "\004\352\036\ufff0\037\ufff0\042\ufff0\045\ufff0\051\ufff0\063" +
    "\ufff0\001\002\000\004\005\342\001\002\000\004\005\336" +
    "\001\002\000\004\005\317\001\002\000\022\002\000\003" +
    "\014\036\006\037\007\042\015\045\017\051\005\063\021" +
    "\001\002\000\022\002\ufffe\003\ufffe\036\ufffe\037\ufffe\042" +
    "\ufffe\045\ufffe\051\ufffe\063\ufffe\001\002\000\024\002\uffee" +
    "\003\uffee\004\315\036\uffee\037\uffee\042\uffee\045\uffee\051" +
    "\uffee\063\uffee\001\002\000\022\002\ufffd\003\ufffd\036\ufffd" +
    "\037\ufffd\042\ufffd\045\ufffd\051\ufffd\063\ufffd\001\002\000" +
    "\006\004\314\010\313\001\002\000\006\003\065\007\064" +
    "\001\002\000\004\006\302\001\002\000\004\005\274\001" +
    "\002\000\004\060\272\001\002\000\010\005\025\011\024" +
    "\060\026\001\002\000\004\002\023\001\002\000\004\002" +
    "\001\001\002\000\032\005\060\011\265\016\032\031\040" +
    "\032\050\033\036\034\034\046\044\055\052\056\054\057" +
    "\046\063\062\001\002\000\032\005\060\006\263\016\032" +
    "\031\040\032\050\033\036\034\034\046\044\055\052\056" +
    "\054\057\046\063\062\001\002\000\032\005\041\016\032" +
    "\031\040\032\050\033\036\034\034\046\044\053\035\055" +
    "\052\056\054\057\046\063\051\001\002\000\112\002\uffa6" +
    "\003\uffa6\004\uffa6\006\uffa6\010\uffa6\011\024\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\036\uffa6\037\uffa6\042\uffa6\044\uffa6\045\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\054\uffa6\055\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\001\002\000\112\002\uffa4\003\uffa4" +
    "\004\uffa4\006\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\036" +
    "\uffa4\037\uffa4\042\uffa4\044\uffa4\045\uffa4\047\uffa4\050\uffa4" +
    "\051\uffa4\052\uffa4\054\uffa4\055\uffa4\060\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\001\002\000\112\002\uffa5\003\uffa5\004\uffa5" +
    "\006\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\036\uffa5\037" +
    "\uffa5\042\uffa5\044\uffa5\045\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\054\uffa5\055\uffa5\060\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\001\002\000\030\005\060\016\032\031\040\032\050" +
    "\033\036\034\034\046\044\055\052\056\054\057\046\063" +
    "\062\001\002\000\106\002\uffbc\003\uffbc\004\uffbc\006\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\036\uffbc\037\uffbc\042\uffbc\044" +
    "\uffbc\045\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\054\uffbc" +
    "\055\uffbc\061\uffbc\062\uffbc\063\uffbc\001\002\000\106\002" +
    "\uff9f\003\uff9f\004\uff9f\006\uff9f\010\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\036\uff9f\037\uff9f\042\uff9f\044\uff9f\045\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\054\uff9f\055\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\001\002\000\004\005\254\001\002\000\106\002" +
    "\uffa0\003\uffa0\004\uffa0\006\uffa0\010\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\036\uffa0\037\uffa0\042\uffa0\044\uffa0\045\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\054\uffa0\055\uffa0\061\uffa0\062\uffa0" +
    "\063\uffa0\001\002\000\076\002\uffc6\003\uffc6\004\uffc6\010" +
    "\uffc6\015\126\016\116\017\123\020\127\021\117\022\122" +
    "\023\125\024\131\025\121\026\124\027\133\030\115\036" +
    "\uffc6\037\uffc6\042\uffc6\044\120\045\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\054\uffc6\055\uffc6\061\130\062\132\063" +
    "\uffc6\001\002\000\030\005\060\016\032\031\040\032\050" +
    "\033\036\034\034\046\044\055\052\056\054\057\046\063" +
    "\062\001\002\000\032\005\060\006\233\016\032\031\040" +
    "\032\050\033\036\034\034\046\044\055\052\056\054\057" +
    "\046\063\234\001\002\000\106\002\uffb8\003\uffb8\004\uffb8" +
    "\006\uffb8\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\036\uffb8\037\uffb8\042" +
    "\uffb8\044\uffb8\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\054\uffb8\055\uffb8\061\uffb8\062\uffb8\063\uffb8\001\002\000" +
    "\106\002\uff99\003\uff99\004\uff99\006\uff99\010\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\036\uff99\037\uff99\042\uff99\044\uff99\045\uff99\047" +
    "\uff99\050\uff99\051\uff99\052\uff99\054\uff99\055\uff99\061\uff99" +
    "\062\uff99\063\uff99\001\002\000\106\002\uff9b\003\uff9b\004" +
    "\uff9b\006\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\036\uff9b\037\uff9b" +
    "\042\uff9b\044\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\054\uff9b\055\uff9b\061\uff9b\062\uff9b\063\uff9b\001\002" +
    "\000\106\002\uffba\003\uffba\004\uffba\006\uffba\010\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\036\uffba\037\uffba\042\uffba\044\uffba\045\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055\uffba\061" +
    "\uffba\062\uffba\063\uffba\001\002\000\106\002\uff9c\003\uff9c" +
    "\004\uff9c\006\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\036\uff9c\037" +
    "\uff9c\042\uff9c\044\uff9c\045\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\054\uff9c\055\uff9c\061\uff9c\062\uff9c\063\uff9c\001" +
    "\002\000\106\002\uffbb\003\uffbb\004\uffbb\006\uffbb\010\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\036\uffbb\037\uffbb\042\uffbb\044\uffbb\045" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\001\002\000\106\002\uffa1\003" +
    "\uffa1\004\uffa1\006\uffa1\010\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\036\uffa1" +
    "\037\uffa1\042\uffa1\044\uffa1\045\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\054\uffa1\055\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\001\002\000\066\002\uff9e\003\uff9e\004\uff9e\005\055\011" +
    "\024\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\036" +
    "\uff9e\037\uff9e\042\uff9e\044\uff9e\045\uff9e\051\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\001\002\000\106\002\uff98\003\uff98\004" +
    "\uff98\006\uff98\010\uff98\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\036\uff98\037\uff98" +
    "\042\uff98\044\uff98\045\uff98\047\uff98\050\uff98\051\uff98\052" +
    "\uff98\054\uff98\055\uff98\061\uff98\062\uff98\063\uff98\001\002" +
    "\000\106\002\uff9a\003\uff9a\004\uff9a\006\uff9a\010\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\036\uff9a\037\uff9a\042\uff9a\044\uff9a\045\uff9a" +
    "\047\uff9a\050\uff9a\051\uff9a\052\uff9a\054\uff9a\055\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\001\002\000\106\002\uff9d\003\uff9d" +
    "\004\uff9d\006\uff9d\010\uff9d\012\uff9d\013\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\036\uff9d\037" +
    "\uff9d\042\uff9d\044\uff9d\045\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\054\uff9d\055\uff9d\061\uff9d\062\uff9d\063\uff9d\001" +
    "\002\000\032\005\060\006\061\016\032\031\040\032\050" +
    "\033\036\034\034\046\044\055\052\056\054\057\046\063" +
    "\062\001\002\000\006\006\232\014\111\001\002\000\044" +
    "\006\uffcb\014\uffcb\015\126\016\116\017\123\020\127\021" +
    "\117\022\122\023\125\024\131\025\121\026\124\027\133" +
    "\030\115\044\120\061\130\062\132\001\002\000\030\005" +
    "\060\016\032\031\040\032\050\033\036\034\034\046\044" +
    "\055\052\056\054\057\046\063\062\001\002\000\064\002" +
    "\uffea\003\uffea\004\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\036\uffea\037\uffea\042\uffea\043\063\044\uffea" +
    "\045\uffea\051\uffea\061\uffea\062\uffea\063\uffea\001\002\000" +
    "\112\002\uff9e\003\uff9e\004\uff9e\005\025\006\uff9e\010\uff9e" +
    "\011\024\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\036\uff9e\037\uff9e\042\uff9e\044" +
    "\uff9e\045\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\054\uff9e" +
    "\055\uff9e\061\uff9e\062\uff9e\063\uff9e\001\002\000\006\003" +
    "\065\007\064\001\002\000\024\036\073\037\007\042\101" +
    "\045\102\050\071\051\072\052\076\054\074\063\103\001" +
    "\002\000\004\007\067\001\002\000\022\002\ufff5\003\ufff5" +
    "\036\ufff5\037\ufff5\042\ufff5\045\ufff5\051\ufff5\063\ufff5\001" +
    "\002\000\040\002\uffbd\003\uffbd\010\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\042\uffbd\045\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\054\uffbd\055\uffbd\063\uffbd\001\002\000\026\010\227" +
    "\036\073\037\007\042\101\045\102\050\071\051\072\052" +
    "\076\054\074\063\103\001\002\000\034\004\226\010\uffd4" +
    "\036\uffd4\037\uffd4\042\uffd4\045\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\054\uffd4\055\uffd4\063\uffd4\001\002\000\004" +
    "\005\203\001\002\000\004\005\177\001\002\000\034\004" +
    "\176\010\uffd1\036\uffd1\037\uffd1\042\uffd1\045\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\054\uffd1\055\uffd1\063\uffd1\001" +
    "\002\000\032\010\uffe5\036\uffe5\037\uffe5\042\uffe5\045\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5\055\uffe5\063" +
    "\uffe5\001\002\000\036\004\172\005\171\010\uffd2\036\uffd2" +
    "\037\uffd2\042\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\054\uffd2\055\uffd2\063\uffd2\001\002\000\032\010\uffd7" +
    "\036\uffd7\037\uffd7\042\uffd7\045\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\054\uffd7\055\uffd7\063\uffd7\001\002\000\032" +
    "\010\uffe0\036\uffe0\037\uffe0\042\uffe0\045\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\054\uffe0\055\uffe0\063\uffe0\001\002" +
    "\000\006\003\065\007\064\001\002\000\004\005\155\001" +
    "\002\000\010\005\105\011\024\060\104\001\002\000\030" +
    "\005\060\016\032\031\040\032\050\033\036\034\034\046" +
    "\044\055\052\056\054\057\046\063\062\001\002\000\032" +
    "\005\060\006\107\016\032\031\040\032\050\033\036\034" +
    "\034\046\044\055\052\056\054\057\046\063\062\001\002" +
    "\000\006\006\112\014\111\001\002\000\034\004\110\010" +
    "\uffd5\036\uffd5\037\uffd5\042\uffd5\045\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\054\uffd5\055\uffd5\063\uffd5\001\002\000" +
    "\032\010\uffd9\036\uffd9\037\uffd9\042\uffd9\045\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\054\uffd9\055\uffd9\063\uffd9\001" +
    "\002\000\030\005\060\016\032\031\040\032\050\033\036" +
    "\034\034\046\044\055\052\056\054\057\046\063\062\001" +
    "\002\000\034\004\113\010\uffd6\036\uffd6\037\uffd6\042\uffd6" +
    "\045\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\054\uffd6\055" +
    "\uffd6\063\uffd6\001\002\000\032\010\uffda\036\uffda\037\uffda" +
    "\042\uffda\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda\054" +
    "\uffda\055\uffda\063\uffda\001\002\000\044\006\uffcc\014\uffcc" +
    "\015\126\016\116\017\123\020\127\021\117\022\122\023" +
    "\125\024\131\025\121\026\124\027\133\030\115\044\120" +
    "\061\130\062\132\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\106\002\uffaa\003\uffaa\004" +
    "\uffaa\006\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa\015\126" +
    "\016\116\017\123\020\127\021\117\022\122\023\125\024" +
    "\131\025\121\026\124\027\uffaa\030\115\036\uffaa\037\uffaa" +
    "\042\uffaa\044\120\045\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\054\uffaa\055\uffaa\061\130\062\132\063\uffaa\001\002" +
    "\000\106\002\uffac\003\uffac\004\uffac\006\uffac\010\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\126\016\116\017\123\020\127" +
    "\021\117\022\122\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\036\uffac\037\uffac\042\uffac\044\uffac\045\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\054\uffac\055\uffac\061" +
    "\130\062\uffac\063\uffac\001\002\000\106\002\uffb0\003\uffb0" +
    "\004\uffb0\006\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\126\016\116\017\123\020\127\021\117\022\122\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\036\uffb0\037" +
    "\uffb0\042\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\054\uffb0\055\uffb0\061\130\062\uffb0\063\uffb0\001" +
    "\002\000\042\013\140\015\126\016\116\017\123\020\127" +
    "\021\117\022\122\023\125\024\131\025\121\026\124\027" +
    "\133\030\115\044\120\061\130\062\132\001\002\000\030" +
    "\005\060\016\032\031\040\032\050\033\036\034\034\046" +
    "\044\055\052\056\054\057\046\063\062\001\002\000\106" +
    "\002\uffa7\003\uffa7\004\uffa7\006\uffa7\010\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\126\016\116\017\123\020\127\021\117" +
    "\022\122\023\125\024\131\025\121\026\124\027\133\030" +
    "\115\036\uffa7\037\uffa7\042\uffa7\044\120\045\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\054\uffa7\055\uffa7\061\130\062" +
    "\132\063\uffa7\001\002\000\106\002\uffb3\003\uffb3\004\uffb3" +
    "\006\uffb3\010\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\117\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\036\uffb3\037\uffb3\042" +
    "\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\054\uffb3\055\uffb3\061\130\062\uffb3\063\uffb3\001\002\000" +
    "\106\002\uffb7\003\uffb7\004\uffb7\006\uffb7\010\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\123\020\127\021" +
    "\117\022\122\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\036\uffb7\037\uffb7\042\uffb7\044\uffb7\045\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\055\uffb7\061\130" +
    "\062\uffb7\063\uffb7\001\002\000\106\002\uffae\003\uffae\004" +
    "\uffae\006\uffae\010\uffae\012\uffae\013\uffae\014\uffae\015\126" +
    "\016\116\017\123\020\127\021\117\022\122\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\036\uffae\037\uffae" +
    "\042\uffae\044\uffae\045\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\054\uffae\055\uffae\061\130\062\uffae\063\uffae\001\002" +
    "\000\106\002\uffaf\003\uffaf\004\uffaf\006\uffaf\010\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\126\016\116\017\123\020\127" +
    "\021\117\022\122\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\036\uffaf\037\uffaf\042\uffaf\044\uffaf\045\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf\055\uffaf\061" +
    "\130\062\uffaf\063\uffaf\001\002\000\106\002\uffb5\003\uffb5" +
    "\004\uffb5\006\uffb5\010\uffb5\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\117\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\036\uffb5\037" +
    "\uffb5\042\uffb5\044\uffb5\045\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\054\uffb5\055\uffb5\061\130\062\uffb5\063\uffb5\001" +
    "\002\000\106\002\uffb4\003\uffb4\004\uffb4\006\uffb4\010\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\117\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\036\uffb4\037\uffb4\042\uffb4\044\uffb4\045" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4" +
    "\061\130\062\uffb4\063\uffb4\001\002\000\106\002\uffad\003" +
    "\uffad\004\uffad\006\uffad\010\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\126\016\116\017\123\020\127\021\117\022\122\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\036\uffad" +
    "\037\uffad\042\uffad\044\uffad\045\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\054\uffad\055\uffad\061\130\062\uffad\063\uffad" +
    "\001\002\000\106\002\uffab\003\uffab\004\uffab\006\uffab\010" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\126\016\116\017\123" +
    "\020\127\021\117\022\122\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\036\uffab\037\uffab\042\uffab\044\uffab" +
    "\045\uffab\047\uffab\050\uffab\051\uffab\052\uffab\054\uffab\055" +
    "\uffab\061\130\062\uffab\063\uffab\001\002\000\106\002\uffb2" +
    "\003\uffb2\004\uffb2\006\uffb2\010\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\117\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\036" +
    "\uffb2\037\uffb2\042\uffb2\044\uffb2\045\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\054\uffb2\055\uffb2\061\130\062\uffb2\063" +
    "\uffb2\001\002\000\106\002\uffb6\003\uffb6\004\uffb6\006\uffb6" +
    "\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\123\020\127\021\117\022\122\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\036\uffb6\037\uffb6\042\uffb6\044" +
    "\uffb6\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6" +
    "\055\uffb6\061\130\062\uffb6\063\uffb6\001\002\000\106\002" +
    "\uffa9\003\uffa9\004\uffa9\006\uffa9\010\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\126\016\116\017\123\020\127\021\117\022" +
    "\122\023\125\024\131\025\121\026\124\027\uffa9\030\uffa9" +
    "\036\uffa9\037\uffa9\042\uffa9\044\120\045\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\054\uffa9\055\uffa9\061\130\062\132" +
    "\063\uffa9\001\002\000\004\063\156\001\002\000\004\041" +
    "\157\001\002\000\030\005\060\016\032\031\040\032\050" +
    "\033\036\034\034\046\044\055\052\056\054\057\046\063" +
    "\062\001\002\000\042\006\161\015\126\016\116\017\123" +
    "\020\127\021\117\022\122\023\125\024\131\025\121\026" +
    "\124\027\133\030\115\044\120\061\130\062\132\001\002" +
    "\000\006\003\065\007\064\001\002\000\032\010\uffdc\036" +
    "\uffdc\037\uffdc\042\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\054\uffdc\055\uffdc\063\uffdc\001\002\000\004\036" +
    "\164\001\002\000\004\005\165\001\002\000\030\005\060" +
    "\016\032\031\040\032\050\033\036\034\034\046\044\055" +
    "\052\056\054\057\046\063\062\001\002\000\042\006\167" +
    "\015\126\016\116\017\123\020\127\021\117\022\122\023" +
    "\125\024\131\025\121\026\124\027\133\030\115\044\120" +
    "\061\130\062\132\001\002\000\034\004\170\010\uffd8\036" +
    "\uffd8\037\uffd8\042\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\054\uffd8\055\uffd8\063\uffd8\001\002\000\032\010" +
    "\uffdb\036\uffdb\037\uffdb\042\uffdb\045\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\054\uffdb\055\uffdb\063\uffdb\001\002\000" +
    "\030\005\060\016\032\031\040\032\050\033\036\034\034" +
    "\046\044\055\052\056\054\057\046\063\062\001\002\000" +
    "\032\010\uffe2\036\uffe2\037\uffe2\042\uffe2\045\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\054\uffe2\055\uffe2\063\uffe2\001" +
    "\002\000\042\006\174\015\126\016\116\017\123\020\127" +
    "\021\117\022\122\023\125\024\131\025\121\026\124\027" +
    "\133\030\115\044\120\061\130\062\132\001\002\000\034" +
    "\004\175\010\uffd3\036\uffd3\037\uffd3\042\uffd3\045\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\055\uffd3\063\uffd3" +
    "\001\002\000\032\010\uffe3\036\uffe3\037\uffe3\042\uffe3\045" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3\055\uffe3" +
    "\063\uffe3\001\002\000\032\010\uffe1\036\uffe1\037\uffe1\042" +
    "\uffe1\045\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\054\uffe1" +
    "\055\uffe1\063\uffe1\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\042\006\201\015\126\016" +
    "\116\017\123\020\127\021\117\022\122\023\125\024\131" +
    "\025\121\026\124\027\133\030\115\044\120\061\130\062" +
    "\132\001\002\000\006\003\065\007\064\001\002\000\032" +
    "\010\uffdf\036\uffdf\037\uffdf\042\uffdf\045\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\054\uffdf\055\uffdf\063\uffdf\001\002" +
    "\000\030\005\060\016\032\031\040\032\050\033\036\034" +
    "\034\046\044\055\052\056\054\057\046\063\062\001\002" +
    "\000\042\006\205\015\126\016\116\017\123\020\127\021" +
    "\117\022\122\023\125\024\131\025\121\026\124\027\133" +
    "\030\115\044\120\061\130\062\132\001\002\000\004\007" +
    "\206\001\002\000\002\001\002\000\010\010\210\047\213" +
    "\055\211\001\002\000\032\010\uffdd\036\uffdd\037\uffdd\042" +
    "\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\054\uffdd" +
    "\055\uffdd\063\uffdd\001\002\000\004\013\224\001\002\000" +
    "\004\047\uffc4\001\002\000\030\005\060\016\032\031\040" +
    "\032\050\033\036\034\034\046\044\055\052\056\054\057" +
    "\046\063\062\001\002\000\004\010\215\001\002\000\032" +
    "\010\uffde\036\uffde\037\uffde\042\uffde\045\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\054\uffde\055\uffde\063\uffde\001\002" +
    "\000\042\013\217\015\126\016\116\017\123\020\127\021" +
    "\117\022\122\023\125\024\131\025\121\026\124\027\133" +
    "\030\115\044\120\061\130\062\132\001\002\000\024\036" +
    "\073\037\007\042\101\045\102\050\071\051\072\052\076" +
    "\054\074\063\103\001\002\000\032\010\uffc2\036\073\037" +
    "\007\042\101\045\102\047\uffc2\050\071\051\072\052\076" +
    "\054\074\055\uffc2\063\103\001\002\000\032\010\uffe6\036" +
    "\uffe6\037\uffe6\042\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\054\uffe6\055\uffe6\063\uffe6\001\002\000\004\047" +
    "\213\001\002\000\010\010\uffc3\047\uffc3\055\uffc3\001\002" +
    "\000\024\036\073\037\007\042\101\045\102\050\071\051" +
    "\072\052\076\054\074\063\103\001\002\000\026\010\uffc1" +
    "\036\073\037\007\042\101\045\102\050\071\051\072\052" +
    "\076\054\074\063\103\001\002\000\032\010\uffe4\036\uffe4" +
    "\037\uffe4\042\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\054\uffe4\055\uffe4\063\uffe4\001\002\000\040\002\uffbe" +
    "\003\uffbe\010\uffbe\036\uffbe\037\uffbe\040\uffbe\042\uffbe\045" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe" +
    "\063\uffbe\001\002\000\042\006\231\015\126\016\116\017" +
    "\123\020\127\021\117\022\122\023\125\024\131\025\121" +
    "\026\124\027\133\030\115\044\120\061\130\062\132\001" +
    "\002\000\106\002\uffb9\003\uffb9\004\uffb9\006\uffb9\010\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\036\uffb9\037\uffb9\042\uffb9\044\uffb9\045" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\001\002\000\106\002\uffeb\003" +
    "\uffeb\004\uffeb\006\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\036\uffeb" +
    "\037\uffeb\042\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\054\uffeb\055\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\001\002\000\004\043\251\001\002\000\052\005\025\006" +
    "\uff9e\011\024\014\235\015\uff9e\016\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\044\uff9e\060\236\061\uff9e\062\uff9e\001\002" +
    "\000\004\063\241\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\044\006\uffe7\014\240\015" +
    "\126\016\116\017\123\020\127\021\117\022\122\023\125" +
    "\024\131\025\121\026\124\027\133\030\115\044\120\061" +
    "\130\062\132\001\002\000\004\063\241\001\002\000\010" +
    "\006\uffc7\014\uffc7\060\246\001\002\000\006\006\uffe8\014" +
    "\244\001\002\000\006\006\uffc9\014\uffc9\001\002\000\004" +
    "\063\241\001\002\000\006\006\uffca\014\uffca\001\002\000" +
    "\030\005\060\016\032\031\040\032\050\033\036\034\034" +
    "\046\044\055\052\056\054\057\046\063\062\001\002\000" +
    "\044\006\uffc8\014\uffc8\015\126\016\116\017\123\020\127" +
    "\021\117\022\122\023\125\024\131\025\121\026\124\027" +
    "\133\030\115\044\120\061\130\062\132\001\002\000\006" +
    "\006\uffe9\014\244\001\002\000\006\003\065\007\064\001" +
    "\002\000\022\002\ufff4\003\ufff4\036\ufff4\037\ufff4\042\ufff4" +
    "\045\ufff4\051\ufff4\063\ufff4\001\002\000\106\002\uffa8\003" +
    "\uffa8\004\uffa8\006\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\036\uffa8" +
    "\037\uffa8\042\uffa8\044\uffa8\045\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\054\uffa8\055\uffa8\061\uffa8\062\uffa8\063\uffa8" +
    "\001\002\000\006\006\255\063\241\001\002\000\006\003" +
    "\065\007\064\001\002\000\006\006\257\014\244\001\002" +
    "\000\006\003\065\007\064\001\002\000\022\002\ufff8\003" +
    "\ufff8\036\ufff8\037\ufff8\042\ufff8\045\ufff8\051\ufff8\063\ufff8" +
    "\001\002\000\022\002\ufff7\003\ufff7\036\ufff7\037\ufff7\042" +
    "\ufff7\045\ufff7\051\ufff7\063\ufff7\001\002\000\106\002\uffb1" +
    "\003\uffb1\004\uffb1\006\uffb1\010\uffb1\012\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\036" +
    "\uffb1\037\uffb1\042\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\054\uffb1\055\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\001\002\000\106\002\uffea\003\uffea\004\uffea\006\uffea" +
    "\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\036\uffea\037\uffea\042\uffea\044" +
    "\uffea\045\uffea\047\uffea\050\uffea\051\uffea\052\uffea\054\uffea" +
    "\055\uffea\061\uffea\062\uffea\063\uffea\001\002\000\042\012" +
    "\271\015\126\016\116\017\123\020\127\021\117\022\122" +
    "\023\125\024\131\025\121\026\124\027\133\030\115\044" +
    "\120\061\130\062\132\001\002\000\030\005\060\016\032" +
    "\031\040\032\050\033\036\034\034\046\044\055\052\056" +
    "\054\057\046\063\062\001\002\000\042\012\267\015\126" +
    "\016\116\017\123\020\127\021\117\022\122\023\125\024" +
    "\131\025\121\026\124\027\133\030\115\044\120\061\130" +
    "\062\132\001\002\000\004\012\270\001\002\000\112\002" +
    "\uffa2\003\uffa2\004\uffa2\006\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2" +
    "\030\uffa2\036\uffa2\037\uffa2\042\uffa2\044\uffa2\045\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\054\uffa2\055\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\001\002\000\112\002\uffa3\003" +
    "\uffa3\004\uffa3\006\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\036\uffa3\037\uffa3\042\uffa3\044\uffa3\045\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3\060\uffa3\061\uffa3" +
    "\062\uffa3\063\uffa3\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\076\002\uffc5\003\uffc5\004" +
    "\uffc5\010\uffc5\015\126\016\116\017\123\020\127\021\117" +
    "\022\122\023\125\024\131\025\121\026\124\027\133\030" +
    "\115\036\uffc5\037\uffc5\042\uffc5\044\120\045\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5\061\130\062" +
    "\132\063\uffc5\001\002\000\004\063\275\001\002\000\004" +
    "\041\276\001\002\000\030\005\060\016\032\031\040\032" +
    "\050\033\036\034\034\046\044\055\052\056\054\057\046" +
    "\063\062\001\002\000\042\006\300\015\126\016\116\017" +
    "\123\020\127\021\117\022\122\023\125\024\131\025\121" +
    "\026\124\027\133\030\115\044\120\061\130\062\132\001" +
    "\002\000\006\003\065\007\064\001\002\000\022\002\ufff9" +
    "\003\ufff9\036\ufff9\037\ufff9\042\ufff9\045\ufff9\051\ufff9\063" +
    "\ufff9\001\002\000\004\043\303\001\002\000\006\003\065" +
    "\007\064\001\002\000\022\002\ufff6\003\ufff6\036\ufff6\037" +
    "\ufff6\042\ufff6\045\ufff6\051\ufff6\063\ufff6\001\002\000\004" +
    "\036\306\001\002\000\004\005\307\001\002\000\030\005" +
    "\060\016\032\031\040\032\050\033\036\034\034\046\044" +
    "\055\052\056\054\057\046\063\062\001\002\000\042\006" +
    "\311\015\126\016\116\017\123\020\127\021\117\022\122" +
    "\023\125\024\131\025\121\026\124\027\133\030\115\044" +
    "\120\061\130\062\132\001\002\000\024\002\uffef\003\uffef" +
    "\004\312\036\uffef\037\uffef\042\uffef\045\uffef\051\uffef\063" +
    "\uffef\001\002\000\022\002\ufff3\003\ufff3\036\ufff3\037\ufff3" +
    "\042\ufff3\045\ufff3\051\ufff3\063\ufff3\001\002\000\022\002" +
    "\uffec\003\uffec\036\uffec\037\uffec\042\uffec\045\uffec\051\uffec" +
    "\063\uffec\001\002\000\022\002\uffed\003\uffed\036\uffed\037" +
    "\uffed\042\uffed\045\uffed\051\uffed\063\uffed\001\002\000\022" +
    "\002\ufff2\003\ufff2\036\ufff2\037\ufff2\042\ufff2\045\ufff2\051" +
    "\ufff2\063\ufff2\001\002\000\022\002\uffff\003\uffff\036\uffff" +
    "\037\uffff\042\uffff\045\uffff\051\uffff\063\uffff\001\002\000" +
    "\030\005\060\016\032\031\040\032\050\033\036\034\034" +
    "\046\044\055\052\056\054\057\046\063\062\001\002\000" +
    "\042\006\321\015\126\016\116\017\123\020\127\021\117" +
    "\022\122\023\125\024\131\025\121\026\124\027\133\030" +
    "\115\044\120\061\130\062\132\001\002\000\006\003\065" +
    "\007\064\001\002\000\040\002\uffd0\003\uffd0\010\uffd0\036" +
    "\uffd0\037\uffd0\040\323\042\uffd0\045\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\054\uffd0\055\uffd0\063\uffd0\001\002\000" +
    "\006\003\065\007\064\001\002\000\040\002\uffcf\003\uffcf" +
    "\010\uffcf\036\uffcf\037\uffcf\040\325\042\uffcf\045\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\054\uffcf\055\uffcf\063\uffcf" +
    "\001\002\000\010\003\065\007\064\037\327\001\002\000" +
    "\040\002\uffc0\003\uffc0\010\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\042\uffc0\045\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\054" +
    "\uffc0\055\uffc0\063\uffc0\001\002\000\004\005\331\001\002" +
    "\000\036\002\uffce\003\uffce\010\uffce\036\uffce\037\uffce\042" +
    "\uffce\045\uffce\047\uffce\050\uffce\051\uffce\052\uffce\054\uffce" +
    "\055\uffce\063\uffce\001\002\000\030\005\060\016\032\031" +
    "\040\032\050\033\036\034\034\046\044\055\052\056\054" +
    "\057\046\063\062\001\002\000\042\006\333\015\126\016" +
    "\116\017\123\020\127\021\117\022\122\023\125\024\131" +
    "\025\121\026\124\027\133\030\115\044\120\061\130\062" +
    "\132\001\002\000\006\003\065\007\064\001\002\000\040" +
    "\002\uffbf\003\uffbf\010\uffbf\036\uffbf\037\uffbf\040\uffbf\042" +
    "\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf" +
    "\055\uffbf\063\uffbf\001\002\000\036\002\uffcd\003\uffcd\010" +
    "\uffcd\036\uffcd\037\uffcd\042\uffcd\045\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\054\uffcd\055\uffcd\063\uffcd\001\002\000" +
    "\030\005\060\016\032\031\040\032\050\033\036\034\034" +
    "\046\044\055\052\056\054\057\046\063\062\001\002\000" +
    "\042\006\340\015\126\016\116\017\123\020\127\021\117" +
    "\022\122\023\125\024\131\025\121\026\124\027\133\030" +
    "\115\044\120\061\130\062\132\001\002\000\006\003\065" +
    "\007\064\001\002\000\022\002\ufffc\003\ufffc\036\ufffc\037" +
    "\ufffc\042\ufffc\045\ufffc\051\ufffc\063\ufffc\001\002\000\030" +
    "\005\060\016\032\031\040\032\050\033\036\034\034\046" +
    "\044\055\052\056\054\057\046\063\062\001\002\000\042" +
    "\006\344\015\126\016\116\017\123\020\127\021\117\022" +
    "\122\023\125\024\131\025\121\026\124\027\133\030\115" +
    "\044\120\061\130\062\132\001\002\000\004\007\345\001" +
    "\002\000\002\001\002\000\010\010\347\047\213\055\211" +
    "\001\002\000\022\002\ufffa\003\ufffa\036\ufffa\037\ufffa\042" +
    "\ufffa\045\ufffa\051\ufffa\063\ufffa\001\002\000\004\010\351" +
    "\001\002\000\022\002\ufffb\003\ufffb\036\ufffb\037\ufffb\042" +
    "\ufffb\045\ufffb\051\ufffb\063\ufffb\001\002\000\022\002\ufff1" +
    "\003\ufff1\036\ufff1\037\ufff1\042\ufff1\045\ufff1\051\ufff1\063" +
    "\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\022\002\021\003\007\013\003\016\010\017" +
    "\012\020\017\025\011\033\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\003\016\315\017\012\020\017\025\011\033\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\026\021\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\042\020\052\026\032\027\041\030\263\031" +
    "\044\032\046\001\001\000\022\004\055\013\042\020\052" +
    "\026\032\027\041\030\056\031\044\032\046\001\001\000" +
    "\020\013\042\020\052\026\032\027\041\030\036\031\044" +
    "\032\046\001\001\000\004\021\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\042\020\052\026\032" +
    "\027\041\030\261\031\044\032\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\042\020\052\026\032\027" +
    "\041\030\252\031\044\032\046\001\001\000\020\013\042" +
    "\020\052\026\032\027\041\030\227\031\044\032\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\026\021\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\055\013\042\020\052\026\032\027\041\030\056\031\044" +
    "\032\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\042\020\052\026\032\027\041\030\227\031\044" +
    "\032\046\001\001\000\002\001\001\000\006\012\026\021" +
    "\027\001\001\000\004\007\065\001\001\000\014\005\067" +
    "\014\074\017\077\020\017\025\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\220" +
    "\017\077\020\017\025\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\162\001\001\000\002\001\001\000\006" +
    "\012\026\021\027\001\001\000\020\013\042\020\052\026" +
    "\032\027\041\030\036\031\044\032\046\001\001\000\022" +
    "\004\105\013\042\020\052\026\032\027\041\030\056\031" +
    "\044\032\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\042\020\052\026\032\027" +
    "\041\030\113\031\044\032\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\042\020" +
    "\052\026\032\027\041\030\153\031\044\032\046\001\001" +
    "\000\020\013\042\020\052\026\032\027\041\030\152\031" +
    "\044\032\046\001\001\000\020\013\042\020\052\026\032" +
    "\027\041\030\151\031\044\032\046\001\001\000\020\013" +
    "\042\020\052\026\032\027\041\030\150\031\044\032\046" +
    "\001\001\000\020\013\042\020\052\026\032\027\041\030" +
    "\147\031\044\032\046\001\001\000\020\013\042\020\052" +
    "\026\032\027\041\030\146\031\044\032\046\001\001\000" +
    "\020\013\042\020\052\026\032\027\041\030\145\031\044" +
    "\032\046\001\001\000\020\013\042\020\052\026\032\027" +
    "\041\030\144\031\044\032\046\001\001\000\020\013\042" +
    "\020\052\026\032\027\041\030\143\031\044\032\046\001" +
    "\001\000\020\013\042\020\052\026\032\027\041\030\142" +
    "\031\044\032\046\001\001\000\020\013\042\020\052\026" +
    "\032\027\041\030\141\031\044\032\046\001\001\000\020" +
    "\013\042\020\052\026\032\027\041\030\136\031\044\032" +
    "\046\001\001\000\020\013\042\020\052\026\032\027\041" +
    "\030\135\031\044\032\046\001\001\000\020\013\042\020" +
    "\052\026\032\027\041\030\134\031\044\032\046\001\001" +
    "\000\020\013\042\020\052\026\032\027\041\030\133\031" +
    "\044\032\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\042\020" +
    "\052\026\032\027\041\030\140\031\044\032\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\042\020\052\026\032\027" +
    "\041\030\157\031\044\032\046\001\001\000\002\001\001" +
    "\000\004\007\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\042\020\052\026\032" +
    "\027\041\030\165\031\044\032\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\042" +
    "\020\052\026\032\027\041\030\172\031\044\032\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\042\020" +
    "\052\026\032\027\041\030\177\031\044\032\046\001\001" +
    "\000\002\001\001\000\004\007\201\001\001\000\002\001" +
    "\001\000\020\013\042\020\052\026\032\027\041\030\203" +
    "\031\044\032\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\206\001\001\000\006\022\211\023\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\221\001\001\000\020\013\042\020\052\026\032\027\041" +
    "\030\215\031\044\032\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\217\014\074" +
    "\017\077\020\017\025\076\001\001\000\012\014\220\017" +
    "\077\020\017\025\076\001\001\000\002\001\001\000\004" +
    "\022\222\001\001\000\002\001\001\000\014\005\224\014" +
    "\074\017\077\020\017\025\076\001\001\000\012\014\220" +
    "\017\077\020\017\025\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\026\021\027\001" +
    "\001\000\006\011\247\024\242\001\001\000\020\013\042" +
    "\020\052\026\032\027\041\030\236\031\044\032\046\001" +
    "\001\000\002\001\001\000\006\011\241\024\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\244\001\001\000\002\001\001\000\020\013\042" +
    "\020\052\026\032\027\041\030\246\031\044\032\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\255\024\242\001\001\000\004\007\260\001\001\000\002" +
    "\001\001\000\004\007\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\042\020\052\026\032\027\041\030" +
    "\265\031\044\032\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\042\020\052\026\032\027\041\030\272\031\044\032\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\042\020\052\026\032\027\041\030\276" +
    "\031\044\032\046\001\001\000\002\001\001\000\004\007" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\042\020\052\026\032\027\041" +
    "\030\307\031\044\032\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\042\020\052\026\032\027\041\030\317\031\044\032\046" +
    "\001\001\000\002\001\001\000\004\007\321\001\001\000" +
    "\004\006\323\001\001\000\004\007\334\001\001\000\004" +
    "\015\325\001\001\000\004\007\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\042" +
    "\020\052\026\032\027\041\030\331\031\044\032\046\001" +
    "\001\000\002\001\001\000\004\007\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\042\020\052\026" +
    "\032\027\041\030\336\031\044\032\046\001\001\000\002" +
    "\001\001\000\004\007\340\001\001\000\002\001\001\000" +
    "\020\013\042\020\052\026\032\027\041\030\342\031\044" +
    "\032\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\345\001\001\000\006\022\211\023\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     *variable en la que se almacena el árbol
     *genera luego del análisis sintáctico
     */
    public LinkedList<NodoAST> AST;
    /**
     *Método que se llama automáticamente
     *al tener un error sintáctico
     */
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error, no se esperaba el caracter: "+s.value));
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error irrecuperable, no se esperaba el caracter: "+s.value));
    } 
     /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public LinkedList<NodoAST> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    parser.AST =a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>();RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= ntif 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= RWHILE PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Mientras(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= RSWITCH PARIZQ expresion PARDER LLAVIZQ casos defecto LLAVDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Comprobar(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= RSWITCH PARIZQ expresion PARDER LLAVIZQ casos LLAVDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Comprobar(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= RFOR PARIZQ IDENTIFICADOR RIN expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Para(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= IDENTIFICADOR IGUAL RFUNC PARIZQ listaparam PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FuncionProgramada(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= IDENTIFICADOR IGUAL RFUNC PARIZQ PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new FuncionProgramada(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= parametros PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		FuncionProgramada a = (FuncionProgramada)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setBloque(b);RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= IDENTIFICADOR IGUAL IDENTIFICADOR PARIZQ PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = FuncionProgramada(a,new LinkedList<NodoAST>(b),c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= IDENTIFICADOR IGUAL PARIZQ PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FuncionProgramada(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= RDO bloque RWHILE PARIZQ expresion PARDER PTCOMA 
            {
              NodoAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new HacerMientras(b,a,cleft,cright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= asignacion PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT =a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= llamada PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT =a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= llamada 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= RDO bloque RWHILE PARIZQ expresion PARDER 
            {
              NodoAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new HacerMientras(b,a,cleft,cright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= asignacion 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= error PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= error LLAVDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // llamada ::= IDENTIFICADOR PARIZQ listaexpresiones PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Llamada(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // llamada ::= IDENTIFICADOR PARIZQ PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Llamada(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= IDENTIFICADOR IGUAL PARIZQ IDENTIFICADOR COMA listaparam 
            {
              FuncionProgramada RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Asignacion asig = new Asignacion(b,null,bleft,bright);c.addFirst(b); RESULT = new FuncionProgramada(a,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros ::= IDENTIFICADOR IGUAL PARIZQ IDENTIFICADOR IGUAL expresion COMA listaparam 
            {
              FuncionProgramada RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Asignacion asig = new Asignacion(b,c,bleft,bright);d.addFirst(c); RESULT = new Funcion(a,d,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros ::= IDENTIFICADOR IGUAL PARIZQ IDENTIFICADOR IGUAL expresion 
            {
              FuncionProgramada RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Asignacion asig = new Asignacion(b,c,bleft,bright); RESULT = new FuncionProgramada(a,asig,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccioneslocales ::= instruccioneslocales instruccionlocal 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccioneslocales",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccioneslocales ::= instruccionlocal 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<NodoAST>();RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccioneslocales",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccionlocal ::= RBREAK PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Break(aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccionlocal ::= RRETURN PARIZQ expresion PARDER PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Retorno(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccionlocal ::= RRETURN PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Retorno(aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccionlocal ::= RCONTINUE PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Continue(aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccionlocal ::= ntif 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccionlocal ::= RWHILE PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Mientras(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccionlocal ::= RSWITCH PARIZQ expresion PARDER LLAVIZQ casos defecto LLAVDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		NodoAST c = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Comprobar(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccionlocal ::= RSWITCH PARIZQ expresion PARDER LLAVIZQ casos LLAVDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Comprobar(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccionlocal ::= RFOR PARIZQ IDENTIFICADOR RIN expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Para(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccionlocal ::= RDO bloque RWHILE PARIZQ expresion PARDER PTCOMA 
            {
              NodoAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new HacerMientras(b,a,cleft,cright);}              
                    | asignacion PTCOMA                                                     {: RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccionlocal ::= IDENTIFICADOR PARIZQ listaexpresiones PARDER PTCOMA 
            {
              NodoAST RESULT =null;
		 RESULT = new Llamada(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccionlocal ::= IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              NodoAST RESULT =null;
		 RESULT = new Llamada(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccionlocal ::= RDO bloque RWHILE PARIZQ expresion PARDER 
            {
              NodoAST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new HacerMientras(b,a,cleft,cright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccionlocal ::= asignacion 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccionlocal ::= IDENTIFICADOR PARIZQ listaexpresiones PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Llamada(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccionlocal ::= IDENTIFICADOR PARIZQ PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Llamada(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccionlocal ::= RBREAK 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Break(aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccionlocal ::= RRETURN PARIZQ expresion PARDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Retorno(e,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccionlocal ::= RRETURN 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Retorno(aleft,aright);)
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccionlocal ::= RCONTINUE 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Continue(aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ntif ::= RIF PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ntif ::= RIF PARIZQ expresion PARDER bloque elseifs 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ntif ::= RIF PARIZQ expresion PARDER bloque elseifs RELSE bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If(a,b,c,d,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ntif ::= RIF PARIZQ expresion PARDER bloque RELSE bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listaexpresiones ::= listaexpresiones COMA expresion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaexpresiones ::= expresion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<NodoAST>(); RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listaparam ::= listaparam COMA param 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparam",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listaparam ::= param 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<NodoAST>(); RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparam",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // param ::= IDENTIFICADOR IGUAL expresion 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Asignacion(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // param ::= IDENTIFICADOR 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a,null,aleft,aright);)
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Asignacion(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacion ::= idarreglo IGUAL expresion 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Asignacion(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$0 ::= 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT = a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // casos ::= casos caso NT$0 caso 
            {
              LinkedList<NodoAST> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (LinkedList<NodoAST>) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<NodoAST>();RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // caso ::= RCASE expresion DOSPT instruccioneslocales 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Caso(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caso",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // defecto ::= RDEFAULT DOSPT instruccioneslocales 
            {
              NodoAST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Caso(a,bleft,bright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defecto",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elseifs ::= elseifs elseif 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		:RESULT = a; RESULT.add(b);}
            |elseif:a                                         {:RESULT = new LinkedList<NodoAST>(); RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elseifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elseif ::= RELSE RIF PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elseif",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloque ::= LLAVIZQ instruccioneslocales LLAVDER 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bloque ::= error LLAVIZQ 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion_numerica 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion_logica 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion_relacional 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= primitivo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_numerica ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionNumerica(a,b,Tipo.Operador.MAS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_numerica ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.MENOS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_numerica ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.POR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_numerica ::= expresion MOD expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.MOD,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_numerica ::= expresion DIV expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.DIV,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion_numerica ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.POT,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion_numerica ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,Tipo.Operador.MENOSUNARIO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion_relacional ::= expresion MAYQUE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MAYOR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion_relacional ::= expresion MAYIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MAYIGUAL,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion_relacional ::= expresion MENQUE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MENOR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion_relacional ::= expresion MENIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MENIGUAL,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion_relacional ::= expresion IGUALACION expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.IGUALACION,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion_relacional ::= expresion DIFERENCIACION expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.DIFERENCIACION,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion_logica ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpresionLogica(a,b,Tipo.Operador.OR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_logica ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpresionLogica(a,b,Tipo.Operador.AND,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_logica ::= NOT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpresionLogica(a,Tipo.Operador.NOT,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_logica ::= expresion TERNARIO expresion DOSPT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Ternario(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // idarreglo ::= IDENTIFICADOR dimensiones 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new IdArreglo(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idarreglo",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // dimensiones ::= dimensiones dimension 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensiones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dimensiones ::= dimension 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<NodoAST>(); RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensiones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dimension ::= CORIZQ expresion CORDER 
            {
              NodoAST RESULT =null;
		 RESULT = new Dimension(a,2,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dimension ::= CORIZQ CORIZQ expresion CORDER CORDER 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Dimension(a,2,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // primitivo ::= NUMERO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Primitivo(Integer.parseInt(a),Tipo.Tipos.INTEGER,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // primitivo ::= DECIMAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Primitivo(Double.parseDouble(a),Tipo.Tipos.NUMERIC,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // primitivo ::= CADENA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Primitivo(a,Tipo.Tipos.STRING,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // primitivo ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new Identificador(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // primitivo ::= RTRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Primitivo(true,Tipo.Tipos.BOOLEANO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // primitivo ::= RFALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Primitivo(false,Tipo.Tipos.BOOLEANO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // primitivo ::= RNULL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Primitivo("null",Tipo.Tipos.STRING,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // primitivo ::= idarreglo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // primitivo ::= llamada 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // primitivo ::= RDEFAULT 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Primitivo(a,Tipo.Tipos.DEFECTO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
