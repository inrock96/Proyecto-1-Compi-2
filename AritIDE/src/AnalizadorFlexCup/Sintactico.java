
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorFlexCup;

import AST.NodoAST;
import Expresiones.Identificador;
import Expresiones.Expresion;
import Expresiones.Primitivo;
import Expresiones.Ternario;
import TablaDeSimbolos.Tipo;
import Expresiones.ExpresionLogica;
import Expresiones.ExpresionNumerica;
import Expresiones.ExpresionRelacional;
import Instrucciones.Asignacion;
import java_cup.runtime.*;
import java.util.*;
import GUI.Ventana;
import Instrucciones.If;
import Expresiones.Funciones.Print;
import TablaDeSimbolos.NodoError;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\014\006" +
    "\000\002\017\003\000\002\017\007\000\002\017\012\000" +
    "\002\017\011\000\002\017\011\000\002\017\011\000\002" +
    "\017\011\000\002\017\004\000\002\017\007\000\002\005" +
    "\004\000\002\005\003\000\002\015\004\000\002\015\005" +
    "\000\002\015\004\000\002\020\007\000\002\020\010\000" +
    "\002\020\012\000\002\020\011\000\002\004\005\000\002" +
    "\004\003\000\002\011\005\000\002\011\003\000\002\025" +
    "\003\000\002\026\005\000\002\026\005\000\002\010\005" +
    "\000\002\023\006\000\002\024\005\000\002\006\004\000" +
    "\002\006\003\000\002\016\010\000\002\007\005\000\002" +
    "\007\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\005\000\002\031\003\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\004\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\004\000\002\033\007\000" +
    "\002\021\004\000\002\013\004\000\002\013\003\000\002" +
    "\022\005\000\002\022\007\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\020\003\013\036\005\037\006\042\014\045" +
    "\015\051\004\063\017\001\002\000\004\005\237\001\002" +
    "\000\004\005\233\001\002\000\004\005\213\001\002\000" +
    "\020\002\000\036\005\037\006\042\014\045\015\051\004" +
    "\063\017\001\002\000\022\002\ufffe\010\ufffe\036\ufffe\037" +
    "\ufffe\042\ufffe\045\ufffe\051\ufffe\063\ufffe\001\002\000\004" +
    "\004\211\001\002\000\022\002\ufffb\010\ufffb\036\ufffb\037" +
    "\ufffb\042\ufffb\045\ufffb\051\ufffb\063\ufffb\001\002\000\022" +
    "\002\ufffd\010\ufffd\036\ufffd\037\ufffd\042\ufffd\045\ufffd\051" +
    "\ufffd\063\ufffd\001\002\000\006\003\142\007\141\001\002" +
    "\000\004\005\175\001\002\000\004\060\133\001\002\000" +
    "\010\005\024\011\022\060\023\001\002\000\004\002\021" +
    "\001\002\000\004\002\001\001\002\000\030\005\060\011" +
    "\170\016\033\031\041\032\051\033\037\034\035\046\045" +
    "\056\054\057\047\063\052\001\002\000\030\005\042\016" +
    "\033\031\041\032\051\033\037\034\035\046\045\053\036" +
    "\056\054\057\047\063\052\001\002\000\002\001\002\000" +
    "\056\004\uffc4\006\uffc4\011\022\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\044\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\001\002\000\056\004\uffc2\006" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\044\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\001\002\000\056\004\uffc3\006\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\044\uffc3\060\uffc3\061\uffc3\062\uffc3\001\002" +
    "\000\004\006\031\001\002\000\004\004\032\001\002\000" +
    "\022\002\ufff3\010\ufff3\036\ufff3\037\ufff3\042\ufff3\045\ufff3" +
    "\051\ufff3\063\ufff3\001\002\000\026\005\060\016\033\031" +
    "\041\032\051\033\037\034\035\046\045\056\054\057\047" +
    "\063\052\001\002\000\052\004\uffda\006\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\044\uffda\061\uffda\062\uffda\001\002\000\052\004\uffbd" +
    "\006\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\044\uffbd\061\uffbd\062\uffbd\001" +
    "\002\000\004\005\162\001\002\000\052\004\uffbe\006\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\044\uffbe\061\uffbe\062\uffbe\001\002\000" +
    "\046\004\uffe4\006\uffe4\014\uffe4\015\073\016\063\017\070" +
    "\020\074\021\064\022\066\023\072\024\100\025\067\026" +
    "\071\027\101\030\062\044\065\061\075\062\077\001\002" +
    "\000\026\005\060\016\033\031\041\032\051\033\037\034" +
    "\035\046\045\056\054\057\047\063\052\001\002\000\026" +
    "\005\060\016\033\031\041\032\051\033\037\034\035\046" +
    "\045\056\054\057\047\063\131\001\002\000\052\004\uffd6" +
    "\006\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\044\uffd6\061\uffd6\062\uffd6\001" +
    "\002\000\052\004\uffb7\006\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\044\uffb7" +
    "\061\uffb7\062\uffb7\001\002\000\052\004\uffb9\006\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\044\uffb9\061\uffb9\062\uffb9\001\002\000\052" +
    "\004\uffd8\006\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\044\uffd8\061\uffd8\062" +
    "\uffd8\001\002\000\052\004\uffba\006\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\044\uffba\061\uffba\062\uffba\001\002\000\052\004\uffd9\006" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\044\uffd9\061\uffd9\062\uffd9\001\002" +
    "\000\052\004\uffbf\006\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\044\uffbf\061" +
    "\uffbf\062\uffbf\001\002\000\056\004\uffbc\005\055\006\uffbc" +
    "\011\022\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\044\uffbc\061\uffbc\062\uffbc\001" +
    "\002\000\052\004\uffb8\006\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\044\uffb8" +
    "\061\uffb8\062\uffb8\001\002\000\052\004\uffbb\006\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\044\uffbb\061\uffbb\062\uffbb\001\002\000\026" +
    "\005\060\016\033\031\041\032\051\033\037\034\035\046" +
    "\045\056\054\057\047\063\052\001\002\000\006\006\124" +
    "\014\123\001\002\000\044\006\uffe8\014\uffe8\015\073\016" +
    "\063\017\070\020\074\021\064\022\066\023\072\024\100" +
    "\025\067\026\071\027\101\030\062\044\065\061\075\062" +
    "\077\001\002\000\026\005\060\016\033\031\041\032\051" +
    "\033\037\034\035\046\045\056\054\057\047\063\052\001" +
    "\002\000\042\006\076\015\073\016\063\017\070\020\074" +
    "\021\064\022\066\023\072\024\100\025\067\026\071\027" +
    "\101\030\062\044\065\061\075\062\077\001\002\000\026" +
    "\005\060\016\033\031\041\032\051\033\037\034\035\046" +
    "\045\056\054\057\047\063\052\001\002\000\026\005\060" +
    "\016\033\031\041\032\051\033\037\034\035\046\045\056" +
    "\054\057\047\063\052\001\002\000\026\005\060\016\033" +
    "\031\041\032\051\033\037\034\035\046\045\056\054\057" +
    "\047\063\052\001\002\000\026\005\060\016\033\031\041" +
    "\032\051\033\037\034\035\046\045\056\054\057\047\063" +
    "\052\001\002\000\026\005\060\016\033\031\041\032\051" +
    "\033\037\034\035\046\045\056\054\057\047\063\052\001" +
    "\002\000\026\005\060\016\033\031\041\032\051\033\037" +
    "\034\035\046\045\056\054\057\047\063\052\001\002\000" +
    "\026\005\060\016\033\031\041\032\051\033\037\034\035" +
    "\046\045\056\054\057\047\063\052\001\002\000\026\005" +
    "\060\016\033\031\041\032\051\033\037\034\035\046\045" +
    "\056\054\057\047\063\052\001\002\000\026\005\060\016" +
    "\033\031\041\032\051\033\037\034\035\046\045\056\054" +
    "\057\047\063\052\001\002\000\026\005\060\016\033\031" +
    "\041\032\051\033\037\034\035\046\045\056\054\057\047" +
    "\063\052\001\002\000\026\005\060\016\033\031\041\032" +
    "\051\033\037\034\035\046\045\056\054\057\047\063\052" +
    "\001\002\000\026\005\060\016\033\031\041\032\051\033" +
    "\037\034\035\046\045\056\054\057\047\063\052\001\002" +
    "\000\052\004\uffd7\006\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\044\uffd7\061" +
    "\uffd7\062\uffd7\001\002\000\026\005\060\016\033\031\041" +
    "\032\051\033\037\034\035\046\045\056\054\057\047\063" +
    "\052\001\002\000\026\005\060\016\033\031\041\032\051" +
    "\033\037\034\035\046\045\056\054\057\047\063\052\001" +
    "\002\000\026\005\060\016\033\031\041\032\051\033\037" +
    "\034\035\046\045\056\054\057\047\063\052\001\002\000" +
    "\052\004\uffc8\006\uffc8\012\uffc8\013\uffc8\014\uffc8\015\073" +
    "\016\063\017\070\020\074\021\064\022\066\023\072\024" +
    "\100\025\067\026\071\027\uffc8\030\062\044\065\061\075" +
    "\062\077\001\002\000\052\004\uffce\006\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\073\016\063\017\070\020\074\021\064" +
    "\022\066\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\044\uffce\061\075\062\uffce\001\002\000\052\004\uffca" +
    "\006\uffca\012\uffca\013\uffca\014\uffca\015\073\016\063\017" +
    "\070\020\074\021\064\022\066\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\044\uffca\061\075\062\uffca\001" +
    "\002\000\042\013\106\015\073\016\063\017\070\020\074" +
    "\021\064\022\066\023\072\024\100\025\067\026\071\027" +
    "\101\030\062\044\065\061\075\062\077\001\002\000\026" +
    "\005\060\016\033\031\041\032\051\033\037\034\035\046" +
    "\045\056\054\057\047\063\052\001\002\000\052\004\uffc5" +
    "\006\uffc5\012\uffc5\013\uffc5\014\uffc5\015\073\016\063\017" +
    "\070\020\074\021\064\022\066\023\072\024\100\025\067" +
    "\026\071\027\101\030\062\044\065\061\075\062\077\001" +
    "\002\000\052\004\uffd1\006\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\064\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\044\uffd1" +
    "\061\075\062\uffd1\001\002\000\052\004\uffd5\006\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\070\020\074" +
    "\021\064\022\066\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\044\uffd5\061\075\062\uffd5\001\002\000\052" +
    "\004\uffcc\006\uffcc\012\uffcc\013\uffcc\014\uffcc\015\073\016" +
    "\063\017\070\020\074\021\064\022\066\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\044\uffcc\061\075\062" +
    "\uffcc\001\002\000\052\004\uffcd\006\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\073\016\063\017\070\020\074\021\064\022" +
    "\066\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\044\uffcd\061\075\062\uffcd\001\002\000\052\004\uffd3\006" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\064\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\044\uffd3\061\075\062\uffd3\001\002" +
    "\000\052\004\uffcb\006\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\073\016\063\017\070\020\074\021\064\022\066\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\044\uffcb\061" +
    "\075\062\uffcb\001\002\000\052\004\uffd2\006\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\064\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\044\uffd2\061\075\062\uffd2\001\002\000\052\004" +
    "\uffc9\006\uffc9\012\uffc9\013\uffc9\014\uffc9\015\073\016\063" +
    "\017\070\020\074\021\064\022\066\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\044\uffc9\061\075\062\uffc9" +
    "\001\002\000\052\004\uffd0\006\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\064\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\044" +
    "\uffd0\061\075\062\uffd0\001\002\000\052\004\uffd4\006\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\070\020" +
    "\074\021\064\022\066\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\044\uffd4\061\075\062\uffd4\001\002\000" +
    "\052\004\uffc7\006\uffc7\012\uffc7\013\uffc7\014\uffc7\015\073" +
    "\016\063\017\070\020\074\021\064\022\066\023\072\024" +
    "\100\025\067\026\071\027\uffc7\030\uffc7\044\065\061\075" +
    "\062\077\001\002\000\026\005\060\016\033\031\041\032" +
    "\051\033\037\034\035\046\045\056\054\057\047\063\052" +
    "\001\002\000\052\004\ufffc\006\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\044" +
    "\ufffc\061\ufffc\062\ufffc\001\002\000\044\006\uffe9\014\uffe9" +
    "\015\073\016\063\017\070\020\074\021\064\022\066\023" +
    "\072\024\100\025\067\026\071\027\101\030\062\044\065" +
    "\061\075\062\077\001\002\000\006\006\137\014\136\001" +
    "\002\000\006\006\uffe6\014\uffe6\001\002\000\006\006\uffe5" +
    "\014\uffe5\001\002\000\050\005\055\006\uffbc\011\022\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\044\uffbc\060" +
    "\135\061\uffbc\062\uffbc\001\002\000\044\006\uffb8\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\044\uffb8\060\133" +
    "\061\uffb8\062\uffb8\001\002\000\026\005\060\016\033\031" +
    "\041\032\051\033\037\034\035\046\045\056\054\057\047" +
    "\063\052\001\002\000\046\004\uffe3\006\uffe3\014\uffe3\015" +
    "\073\016\063\017\070\020\074\021\064\022\066\023\072" +
    "\024\100\025\067\026\071\027\101\030\062\044\065\061" +
    "\075\062\077\001\002\000\026\005\060\016\033\031\041" +
    "\032\051\033\037\034\035\046\045\056\054\057\047\063" +
    "\052\001\002\000\004\063\157\001\002\000\004\043\140" +
    "\001\002\000\006\003\142\007\141\001\002\000\010\050" +
    "\144\052\145\054\146\001\002\000\024\002\uffdb\010\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\042\uffdb\045\uffdb\051\uffdb\063" +
    "\uffdb\001\002\000\022\002\ufff6\010\ufff6\036\ufff6\037\ufff6" +
    "\042\ufff6\045\ufff6\051\ufff6\063\ufff6\001\002\000\004\004" +
    "\156\001\002\000\026\005\060\016\033\031\041\032\051" +
    "\033\037\034\035\046\045\056\054\057\047\063\052\001" +
    "\002\000\004\004\153\001\002\000\012\010\151\050\144" +
    "\052\145\054\146\001\002\000\016\010\ufff1\047\ufff1\050" +
    "\ufff1\052\ufff1\054\ufff1\055\ufff1\001\002\000\024\002\uffdc" +
    "\010\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\045\uffdc\051" +
    "\uffdc\063\uffdc\001\002\000\016\010\ufff2\047\ufff2\050\ufff2" +
    "\052\ufff2\054\ufff2\055\ufff2\001\002\000\016\010\uffee\047" +
    "\uffee\050\uffee\052\uffee\054\uffee\055\uffee\001\002\000\042" +
    "\004\155\015\073\016\063\017\070\020\074\021\064\022" +
    "\066\023\072\024\100\025\067\026\071\027\101\030\062" +
    "\044\065\061\075\062\077\001\002\000\016\010\uffef\047" +
    "\uffef\050\uffef\052\uffef\054\uffef\055\uffef\001\002\000\016" +
    "\010\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0\055\ufff0\001" +
    "\002\000\006\011\022\060\135\001\002\000\006\006\uffe7" +
    "\014\uffe7\001\002\000\052\004\uffc6\006\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\044\uffc6\061\uffc6\062\uffc6\001\002\000\004\063\157" +
    "\001\002\000\006\006\164\014\136\001\002\000\006\003" +
    "\142\007\141\001\002\000\022\002\ufff7\010\ufff7\036\ufff7" +
    "\037\ufff7\042\ufff7\045\ufff7\051\ufff7\063\ufff7\001\002\000" +
    "\052\004\uffcf\006\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\044\uffcf\061\uffcf" +
    "\062\uffcf\001\002\000\042\012\174\015\073\016\063\017" +
    "\070\020\074\021\064\022\066\023\072\024\100\025\067" +
    "\026\071\027\101\030\062\044\065\061\075\062\077\001" +
    "\002\000\026\005\060\016\033\031\041\032\051\033\037" +
    "\034\035\046\045\056\054\057\047\063\052\001\002\000" +
    "\042\012\172\015\073\016\063\017\070\020\074\021\064" +
    "\022\066\023\072\024\100\025\067\026\071\027\101\030" +
    "\062\044\065\061\075\062\077\001\002\000\004\012\173" +
    "\001\002\000\056\004\uffc0\006\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\044\uffc0\060\uffc0\061\uffc0\062\uffc0\001\002\000\056" +
    "\004\uffc1\006\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\044\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\001\002\000\004\063\176\001\002" +
    "\000\004\041\177\001\002\000\026\005\060\016\033\031" +
    "\041\032\051\033\037\034\035\046\045\056\054\057\047" +
    "\063\052\001\002\000\042\006\201\015\073\016\063\017" +
    "\070\020\074\021\064\022\066\023\072\024\100\025\067" +
    "\026\071\027\101\030\062\044\065\061\075\062\077\001" +
    "\002\000\006\003\142\007\141\001\002\000\022\002\ufff8" +
    "\010\ufff8\036\ufff8\037\ufff8\042\ufff8\045\ufff8\051\ufff8\063" +
    "\ufff8\001\002\000\004\036\204\001\002\000\004\005\205" +
    "\001\002\000\026\005\060\016\033\031\041\032\051\033" +
    "\037\034\035\046\045\056\054\057\047\063\052\001\002" +
    "\000\042\006\207\015\073\016\063\017\070\020\074\021" +
    "\064\022\066\023\072\024\100\025\067\026\071\027\101" +
    "\030\062\044\065\061\075\062\077\001\002\000\004\004" +
    "\210\001\002\000\022\002\ufff5\010\ufff5\036\ufff5\037\ufff5" +
    "\042\ufff5\045\ufff5\051\ufff5\063\ufff5\001\002\000\022\002" +
    "\ufff4\010\ufff4\036\ufff4\037\ufff4\042\ufff4\045\ufff4\051\ufff4" +
    "\063\ufff4\001\002\000\022\002\uffff\010\uffff\036\uffff\037" +
    "\uffff\042\uffff\045\uffff\051\uffff\063\uffff\001\002\000\026" +
    "\005\060\016\033\031\041\032\051\033\037\034\035\046" +
    "\045\056\054\057\047\063\052\001\002\000\042\006\215" +
    "\015\073\016\063\017\070\020\074\021\064\022\066\023" +
    "\072\024\100\025\067\026\071\027\101\030\062\044\065" +
    "\061\075\062\077\001\002\000\006\003\142\007\141\001" +
    "\002\000\024\002\uffed\010\uffed\036\uffed\037\uffed\040\217" +
    "\042\uffed\045\uffed\051\uffed\063\uffed\001\002\000\010\003" +
    "\142\007\141\037\224\001\002\000\024\002\uffec\010\uffec" +
    "\036\uffec\037\uffec\040\222\042\uffec\045\uffec\051\uffec\063" +
    "\uffec\001\002\000\024\002\uffde\010\uffde\036\uffde\037\uffde" +
    "\040\uffde\042\uffde\045\uffde\051\uffde\063\uffde\001\002\000" +
    "\010\003\142\007\141\037\224\001\002\000\024\002\uffdf" +
    "\010\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\045\uffdf\051" +
    "\uffdf\063\uffdf\001\002\000\004\005\226\001\002\000\022" +
    "\002\uffeb\010\uffeb\036\uffeb\037\uffeb\042\uffeb\045\uffeb\051" +
    "\uffeb\063\uffeb\001\002\000\026\005\060\016\033\031\041" +
    "\032\051\033\037\034\035\046\045\056\054\057\047\063" +
    "\052\001\002\000\042\006\230\015\073\016\063\017\070" +
    "\020\074\021\064\022\066\023\072\024\100\025\067\026" +
    "\071\027\101\030\062\044\065\061\075\062\077\001\002" +
    "\000\006\003\142\007\141\001\002\000\024\002\uffdd\010" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\045\uffdd\051\uffdd" +
    "\063\uffdd\001\002\000\022\002\uffea\010\uffea\036\uffea\037" +
    "\uffea\042\uffea\045\uffea\051\uffea\063\uffea\001\002\000\026" +
    "\005\060\016\033\031\041\032\051\033\037\034\035\046" +
    "\045\056\054\057\047\063\052\001\002\000\042\006\235" +
    "\015\073\016\063\017\070\020\074\021\064\022\066\023" +
    "\072\024\100\025\067\026\071\027\101\030\062\044\065" +
    "\061\075\062\077\001\002\000\006\003\142\007\141\001" +
    "\002\000\022\002\ufffa\010\ufffa\036\ufffa\037\ufffa\042\ufffa" +
    "\045\ufffa\051\ufffa\063\ufffa\001\002\000\026\005\060\016" +
    "\033\031\041\032\051\033\037\034\035\046\045\056\054" +
    "\057\047\063\052\001\002\000\042\006\241\015\073\016" +
    "\063\017\070\020\074\021\064\022\066\023\072\024\100" +
    "\025\067\026\071\027\101\030\062\044\065\061\075\062" +
    "\077\001\002\000\004\007\242\001\002\000\002\001\002" +
    "\000\006\047\246\055\244\001\002\000\004\013\255\001" +
    "\002\000\004\047\246\001\002\000\026\005\060\016\033" +
    "\031\041\032\051\033\037\034\035\046\045\056\054\057" +
    "\047\063\052\001\002\000\004\010\250\001\002\000\022" +
    "\002\ufff9\010\ufff9\036\ufff9\037\ufff9\042\ufff9\045\ufff9\051" +
    "\ufff9\063\ufff9\001\002\000\042\013\252\015\073\016\063" +
    "\017\070\020\074\021\064\022\066\023\072\024\100\025" +
    "\067\026\071\027\101\030\062\044\065\061\075\062\077" +
    "\001\002\000\010\050\144\052\145\054\146\001\002\000" +
    "\014\047\uffe1\050\144\052\145\054\146\055\uffe1\001\002" +
    "\000\006\047\uffe2\055\uffe2\001\002\000\020\003\013\036" +
    "\005\037\006\042\014\045\015\051\004\063\017\001\002" +
    "\000\020\010\uffe0\036\005\037\006\042\014\045\015\051" +
    "\004\063\017\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\016\002\017\003\006\017\007\020\011\021" +
    "\015\026\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\211\020\011\021\015\026" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\024\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\043\021\052\027\033\030\042\031\166\032\045\033\047" +
    "\001\001\000\020\014\043\021\052\027\033\030\042\031" +
    "\037\032\045\033\047\001\001\000\004\012\027\001\001" +
    "\000\004\022\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\043\021\052\027\033\030\042\031\165\032" +
    "\045\033\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\043\021\052\027\033\030\042\031\160\032\045" +
    "\033\047\001\001\000\026\011\125\014\043\021\131\025" +
    "\126\026\127\027\033\030\042\031\060\032\045\033\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\024\022\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\055\014\043" +
    "\021\052\027\033\030\042\031\056\032\045\033\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\043" +
    "\021\052\027\033\030\042\031\060\032\045\033\047\001" +
    "\001\000\002\001\001\000\020\014\043\021\052\027\033" +
    "\030\042\031\121\032\045\033\047\001\001\000\020\014" +
    "\043\021\052\027\033\030\042\031\120\032\045\033\047" +
    "\001\001\000\020\014\043\021\052\027\033\030\042\031" +
    "\117\032\045\033\047\001\001\000\020\014\043\021\052" +
    "\027\033\030\042\031\116\032\045\033\047\001\001\000" +
    "\020\014\043\021\052\027\033\030\042\031\115\032\045" +
    "\033\047\001\001\000\020\014\043\021\052\027\033\030" +
    "\042\031\114\032\045\033\047\001\001\000\020\014\043" +
    "\021\052\027\033\030\042\031\113\032\045\033\047\001" +
    "\001\000\020\014\043\021\052\027\033\030\042\031\112" +
    "\032\045\033\047\001\001\000\020\014\043\021\052\027" +
    "\033\030\042\031\111\032\045\033\047\001\001\000\020" +
    "\014\043\021\052\027\033\030\042\031\110\032\045\033" +
    "\047\001\001\000\020\014\043\021\052\027\033\030\042" +
    "\031\107\032\045\033\047\001\001\000\020\014\043\021" +
    "\052\027\033\030\042\031\104\032\045\033\047\001\001" +
    "\000\002\001\001\000\020\014\043\021\052\027\033\030" +
    "\042\031\103\032\045\033\047\001\001\000\020\014\043" +
    "\021\052\027\033\030\042\031\102\032\045\033\047\001" +
    "\001\000\020\014\043\021\052\027\033\030\042\031\101" +
    "\032\045\033\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\043" +
    "\021\052\027\033\030\042\031\106\032\045\033\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\043\021\052\027\033\030\042\031\124\032\045\033\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\024" +
    "\022\025\001\001\000\002\001\001\000\020\014\043\021" +
    "\052\027\033\030\042\031\133\032\045\033\047\001\001" +
    "\000\002\001\001\000\020\014\043\021\052\027\033\030" +
    "\042\031\037\032\045\033\047\001\001\000\010\021\015" +
    "\025\157\026\127\001\001\000\002\001\001\000\004\007" +
    "\142\001\001\000\006\005\146\015\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\043\021\052\027\033\030\042\031\153\032\045\033\047" +
    "\001\001\000\002\001\001\000\004\015\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\024\022\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\162\021\015\025\126\026" +
    "\127\001\001\000\002\001\001\000\004\007\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\043\021\052\027\033\030\042\031\170\032\045" +
    "\033\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\043\021\052\027\033\030\042\031" +
    "\177\032\045\033\047\001\001\000\002\001\001\000\004" +
    "\007\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\014\043\021\052\027\033\030\042" +
    "\031\205\032\045\033\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\043\021\052\027\033\030\042\031" +
    "\213\032\045\033\047\001\001\000\002\001\001\000\004" +
    "\007\215\001\001\000\006\006\217\016\220\001\001\000" +
    "\004\007\231\001\001\000\004\016\222\001\001\000\002" +
    "\001\001\000\004\007\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\043\021\052" +
    "\027\033\030\042\031\226\032\045\033\047\001\001\000" +
    "\002\001\001\000\004\007\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\043\021\052\027\033\030" +
    "\042\031\233\032\045\033\047\001\001\000\002\001\001" +
    "\000\004\007\235\001\001\000\002\001\001\000\020\014" +
    "\043\021\052\027\033\030\042\031\237\032\045\033\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\242\001\001\000\006\023\244\024\246\001\001\000\002" +
    "\001\001\000\004\023\253\001\001\000\020\014\043\021" +
    "\052\027\033\030\042\031\250\032\045\033\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\252\015\147\001\001\000\004\015\151\001\001" +
    "\000\002\001\001\000\014\003\255\017\007\020\011\021" +
    "\015\026\010\001\001\000\012\017\211\020\011\021\015" +
    "\026\010\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     *variable en la que se almacena el árbol
     *genera luego del análisis sintáctico
     */
    public LinkedList<NodoAST> AST;
    /**
     *Método que se llama automáticamente
     *al tener un error sintáctico
     */
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error, no se esperaba el caracter: "+s.value));
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        //CHECK ingresar a una lista de errores
        Ventana.Error.add(new NodoError(s.right,s.left,"Sintáctico","Error irrecuperable, no se esperaba el caracter: "+s.value));
    } 
     /**
     * Método que devuelve el AST que se generó después de realizar el análisis sintáctico. 
     * @return árbol de sintaxis abstacta que será utilizado posteriormente en la ejecución.
     */
    public LinkedList<NodoAST> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    parser.AST =a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST b = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>();RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= error 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // llamada ::= IDENTIFICADOR PARIZQ listaexpresiones PARDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= ntif 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= RWHILE PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= RSWITCH PARIZQ expresion PARDER LLAVIZQ casos defecto LLAVDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= RFOR PARIZQ IDENTIFICADOR RIN expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= IDENTIFICADOR IGUAL RFUNC PARIZQ listaparam PARDER bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= IDENTIFICADOR IGUAL PARIZQ listaparam PARDER IGUALFUNC bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= RDO bloque RWHILE PARIZQ expresion PARDER PTCOMA 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= IDENTIFICADOR PARIZQ parametros PARDER PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccioneslocales ::= instruccioneslocales instruccionlocal 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccioneslocales",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccioneslocales ::= instruccionlocal 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccioneslocales",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccionlocal ::= RBREAK PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccionlocal ::= RRETURN expresion PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccionlocal ::= RCONTINUE PTCOMA 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionlocal",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ntif ::= RIF PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ntif ::= RIF PARIZQ expresion PARDER bloque elseifs 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ntif ::= RIF PARIZQ expresion PARDER bloque elseifs RELSE bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> d = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ntif ::= RIF PARIZQ expresion PARDER bloque RELSE bloque 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ntif",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaexpresiones ::= listaexpresiones COMA expresion 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaexpresiones ::= expresion 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaexpresiones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaparam ::= listaparam COMA param 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparam",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaparam ::= param 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparam",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param ::= asignacion 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("param",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignacion ::= IDENTIFICADOR IGUAL expresion 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Asignacion(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacion ::= idarreglo IGUAL expresion 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Asignacion(a,b,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // casos ::= casos caso caso 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // caso ::= RCASE expresion DOSPT instruccioneslocales 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caso",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // defecto ::= RDEFAULT DOSPT instrucciones 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("defecto",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elseifs ::= elseifs elseif 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elseifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elseifs ::= elseif 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elseifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elseif ::= RELSE RIF PARIZQ expresion PARDER bloque 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elseif",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque ::= LLAVIZQ instruccioneslocales LLAVDER 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque ::= error 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion_numerica 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion_logica 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion_relacional 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= primitivo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_numerica ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionNumerica(a,b,Tipo.Operador.MAS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion_numerica ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.MENOS,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion_numerica ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.POR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_numerica ::= expresion MOD expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.MOD,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_numerica ::= expresion DIV expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.DIV,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_numerica ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,b,Tipo.Operador.POT,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_numerica ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new ExpresionNumerica(a,Tipo.Operador.MENOSUNARIO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_numerica",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_relacional ::= expresion MAYQUE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MAYOR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_relacional ::= expresion MAYIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MAYIGUAL,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_relacional ::= expresion MENQUE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MENOR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_relacional ::= expresion MENIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.MENIGUAL,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_relacional ::= expresion IGUALACION expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.IGUALACION,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_relacional ::= expresion DIFERENCIACION expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new ExpresionRelacional(a,b,Tipo.Operador.DIFERENCIACION,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_logica ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpresionLogica(a,b,Tipo.Operador.OR,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_logica ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpresionLogica(a,b,Tipo.Operador.AND,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_logica ::= NOT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new ExpresionLogica(a,Tipo.Operador.NOT,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_logica ::= expresion TERNARIO expresion DOSPT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Ternario(a,b,c,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // idarreglo ::= IDENTIFICADOR dimensiones 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("idarreglo",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dimensiones ::= dimensiones dimension 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensiones",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dimensiones ::= dimension 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensiones",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dimension ::= CORIZQ expresion CORDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dimension ::= CORIZQ CORIZQ expresion CORDER CORDER 
            {
              NodoAST RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primitivo ::= NUMERO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(Integer.parseInt(a),Tipo.Tipos.INTEGER,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primitivo ::= DECIMAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(Double.parseDouble(a),Tipo.Tipos.NUMERIC,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primitivo ::= CADENA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(a,Tipo.Tipos.STRING,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primitivo ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Identificador(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primitivo ::= RTRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(true,Tipo.Tipos.BOOLEANO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primitivo ::= RFALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Primitivo(false,Tipo.Tipos.BOOLEANO,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // primitivo ::= RNULL 
            {
              Expresion RESULT =null;
		RESULT = null;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // primitivo ::= idarreglo 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // primitivo ::= llamada 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("primitivo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
